A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN .\Objects\set_bell_1.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE set_bell_1.asm SET(SMALL) DEBUG PRINT(.\Listings\set_bell_1.lst) OBJECT
                      (.\Objects\set_bell_1.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;******************************************************************************************
                             ****
                       2     ;The following set of code is assembly level code for digital bell system
                       3     ;Author: Sukesh Rao, Srinivas Pai, Sudesh Pai, Gayathri, Arpitha and 
                       4     ;Version: 0.1
                       5     ;Date: 
                       6     ;******************************************************************************************
                             ****
                       7     
0000                   8     org 00h
0000 020100            9     LJMP BEGIN
                      10     
  00A0                11             SCL                     EQU     0A0h    ;IN THIS EXAMPLE I USED PORT 2.0
  00A1                12             SDA                     EQU     0A1h    ;AND PORT 2.1 FOR THE I2C LINES
                      13                                                         ;YOU CAN CHANGE THEM TO WHATEVER ACCEPT
                             ABLE
  00B3                14             TIME_KEY        EQU             P3.3    ;SET_TIME KEY
  00B4                15             BELL_KEY        EQU             P3.4    ;SET_BELL KEY
  00B5                16             EMRG_KEY        EQU     P3.5    ;EMERGENCY KEY
                      17     
                      18     
                      19     ;=====THE READ AND WRITE COMMANDS (0D0H AND 0D1H)
                      20     
  00D0                21             CONT_BYTE_W             EQU     11010000B
  00D1                22             CONT_BYTE_R             EQU     11010001B
                      23     
0060                  24             ORG    0060H
                      25     
  0061                26             DAVAVA          EQU 61H
  0060                27             ADD_LOWL        EQU 60H
  0062                28             MEMORY_ADDRESS1 EQU 62H
  0063                29             MEMORY_ADDRESS2 EQU 63H
  0064                30             EEPROM_DATA     EQU 64H
                      31     
                      32     ;=====VARIABLES TO STORE THE TIME IN, COULD BE USED ALSO TO STORE DATA TO WRITE ON DS1307
                      33     
  0050                34             SEC                         EQU 50H
  0051                35             MIN                 EQU 51H
  0052                36             HOURS                   EQU     52H
  0067                37             DAY                     EQU     67H
  0053                38             TEMP_DAY                EQU     53H
                      39             ;COUNT1                 EQU 54H
                      40             ;COUNT2         EQU 55H
                      41             ;COUNT3         EQU 56H
                      42             ;COUNT4         EQU 57H
  0059                43             HOURS1                  EQU 59H
  0058                44             MIN1            EQU 58H
  0064                45             FLAG            EQU 64H
  006B                46             COUNT7          EQU 6BH
  0062                47             HOURS2                  EQU     62H
  0063                48             MINS2           EQU 63H
  0069                49             DAYS            EQU 69H
  006A                50             DURATION         EQU 6AH
  0068                51             COUNT8          EQU 68H
  0066                52             COUNT9          EQU 66H
  007C                53             SERIAL          EQU 7CH
  0000                54             MEM_VAL                 EQU     00H
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     2

                      55     
0100                  56             ORG    0100H
                      57     
                      58     ;******************************************************************************************
                             ****
                      59     ;                                                                       CODE BEGINS
                      60     ;******************************************************************************************
                             ****
                      61     
0100                  62     BEGIN:
0100 3121             63     ACALL INTI
                      64                                     ;CALL THE INITIALIZATION MODULE
0102 C2A0             65             CLR SCL                         ;SCL: SERIAL CLOCK LINE ->MEANS THE CLOCK INPUT FOR
                              I2C
0104 C2A1             66             CLR     SDA                     ;SDA: SERIAL DATA I/P & O/P ->MEANS THE INPUR AND O
                             UTPUT LINE
0106 C2A2             67         CLR P2.2                    ;
0108 C2B7             68             CLR P3.7                        ;SOME UNECESSARY STATEMENTS
010A 00               69         NOP                                 ;ANOTHER UNECESSARY STATEMENT
010B D2A0             70         SETB    SCL                 ;       ""              ""
010D D2A1             71         SETB        SDA
010F 00               72         NOP
0110 313F             73             ACALL FIRST             ;MOVE THE CURSOR TO THE BEGINNING OF FIRST LINE
0112 7401             74             MOV A, #01H
0114 3149             75             ACALL CMD
0116 900167           76             MOV DPTR, #WELCOME      ;DISPLAY NICE WELCOME MESSAGE
0119 518A             77         ACALL DISPCH2
                      78         ;ACALL CREATE_DATA
011B 51C1             79         ACALL DELAY_1SEC
011D                  80         LOOP:                               ;BEGINNING OF ACTUAL 'MAIN' LOOP
011D 51E7             81             ACALL CHECK_KEY         ;CHECK FOR THE PRESS OF THE SET_TIME, SET_BELL, EMERGENCY_K
                             EY
011F 80FC             82             SJMP LOOP
                      83     
                      84     ;******************************************************************************************
                             ****
                      85     ;This module initializes the LD
                      86     ;DEPENDANCIES:CMD
                      87     ;******************************************************************************************
                             ****
0121                  88     INTI:   
0121 743C             89             MOV A,#3CH                      ;refer manual for the bit meaning
0123 3149             90             ACALL CMD
0125 743C             91             MOV A,#3CH                      ;DONT KNOW WHY SAME COMMAND IS REPEATER FOR 3 TIMES
0127 3149             92             ACALL CMD       
0129 743C             93             MOV A,#3CH                      ;MAY BE TO BE SUPER SURE ABOUT EXECUTION OF IT ;)
012B 3149             94             ACALL CMD
012D 740C             95             MOV A,#0CH
012F 3149             96             ACALL  CMD
0131 7406             97             MOV A,#06H
0133 3149             98             ACALL  CMD
0135 7401             99             MOV A,#01
0137 3149            100             ACALL CMD
0139 22              101             RET
                     102     
                     103     ;******************************************************************************************
                             ****
                     104     ;This module is used to display the message pointed by DPTR on the DPTR on the screen
                     105     ;DEPENDANCIES:DISPCH2, DELAY_1SEC
                     106     ;******************************************************************************************
                             ****
013A                 107     DISP_MSG:
013A 518A            108         ACALL DISPCH2
013C 51C1            109         ACALL DELAY_1SEC
013E 22              110             RET
                     111     
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     3

                     112     ;******************************************************************************************
                             ****
                     113     ;This module moves the cursor back to first line first position
                     114     ;******************************************************************************************
                             ****
013F                 115     FIRST:
013F 7480            116         MOV A,#80H                  ;look for the these codes in the LCD datasheet
0141 3149            117         ACALL CMD
0143 22              118         RET
                     119     ;SIMILARLY FOR SECOND LINE
0144                 120     SECOND:
0144 74C0            121             MOV A,#0C0H     
0146 3149            122             ACALL CMD
0148 22              123             RET
                     124     
                     125     ;******************************************************************************************
                             *****
                     126     ;This module gives cmd to LCD. Command to be passed to the LCD should be placed in Acc.
                     127     ;To send a command a high to low signal is sent to the enable pin while the command to be
                     128     ;sent is place on the data line and the register select(RS) pin is held low.
                     129     ;DEPENDANCIES: READY
                     130     ;******************************************************************************************
                             *****
0149                 131     CMD:    
0149 3156            132             ACALL READY
014B F580            133             MOV  80H,A
014D C2A5            134             CLR 0A5H                        ; low on RS
014F C2A6            135             CLR 0A6H
0151 D2A7            136             SETB 0A7H                       ; high to low on En line
0153 C2A7            137             CLR 0A7H
0155 22              138             RET
                     139     
                     140     ;******************************************************************************************
                             *****
                     141     ;This module checks the LCD status whether busy or not and returns from the module only if 
                     142     ;the busy bit/pin/line is 0
                     143     ;******************************************************************************************
                             *****
0156                 144     READY:  
0156 C2A7            145         CLR 0A7H                    ;read busy flag
0158 7580FF          146             MOV     80H,#0FFH
015B C2A5            147             CLR     0A5H
015D D2A6            148             SETB    0A6H
015F                 149             WAIT:   
015F C2A7            150                     CLR     0A7H
0161 D2A7            151                     SETB    0A7H
0163 2087F9          152                     JB      87H,WAIT
0166 22              153             RET
                     154     
                     155     
                     156     ;******************************************************************************************
                             *****
                     157     ;                                                                               LOOK-UP TAB
                             LES
                     158     ;******************************************************************************************
                             *****
0167 20202020        159     WELCOME:   db '    WELCOME!',0fh
016B 57454C43                
016F 4F4D4521                
0173 0F                      
0174 20202020        160     MESSAGE1: DB '     HH:MM', 0FH
0178 2048483A                
017C 4D4D0F                  
017F 20202020        161     MESSAGE2: DB '     __:__', 0FH
0183 205F5F3A                
0187 5F5F0F                  
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     4

018A 20202020        162     MESSAGE3: DB '    DAY[1-7]', 0FH
018E 4441595B                
0192 312D375D                
0196 0F                      
0197 494E5641        163     ERROR_MSG: DB 'INVALID NUMBER', 0FH
019B 4C494420                
019F 4E554D42                
01A3 45520F                  
01A6 3030304D        164     WEEKDAY: DB '000','MON','TUE','WED', 'THU', 'FRI', 'SAT', 'SUN' 
01AA 4F4E5455                
01AE 45574544                
01B2 54485546                
01B6 52495341                
01BA 5453554E                
01BE 31323334        165     PASSWORD: DB '1234',0FH
01C2 0F                      
01C3 31323334        166     KEYCODE:DB '1','2','3','4','5','6','7','8','9','*','0','#'
01C7 35363738                
01CB 392A3023                
01CF 2020454E        167     AUTH_MSG: DB '  ENTER THE PIN',0FH
01D3 54455220                
01D7 54484520                
01DB 50494E0F                
01DF 20205449        168     MESSAGE5: DB '  TIME IS SET!', 0FH
01E3 4D452049                
01E7 53205345                
01EB 54210F                  
01EE 20494E43        169     AUTH_FAIL_MSG: DB ' INCORRECT  PIN', 0FH
01F2 4F525245                
01F6 43542020                
01FA 50494E0F                
01FE 20202045        170     EMERGENCY_MSG: DB '   EMERGENCY', 0FH
0202 4D455247                
0206 454E4359                
020A 0F                      
020B 2053454C        171     BELL_MESSAGE: DB ' SELECT OPTION',0FH
020F 45435420                
0213 4F505449                
0217 4F4E0F                  
021A 31294E45        172     BELL_OPTIONS: DB '1)NEW  2)EDIT',0FH
021E 57202032                
0222 29454449                
0226 540F                    
0228 20534C2E        173     BELL_NUMBER_MSG: DB ' SL. NO.[1-',0FH
022C 204E4F2E                
0230 5B312D0F                
0234 20204E4F        174     NO_BELL: DB '  NO BELLS SET',0FH
0238 2042454C                
023C 4C532053                
0240 45540F                  
                     175     ;TEMP: DB 12H,23H,01H
0243 204E4557        176     NEW_BELL_MSG: DB ' NEW BELL TIME', 0FH
0247 2042454C                
024B 4C205449                
024F 4D450F                  
0252 44555241        177     EDIT_DURATION: DB 'DURATION[IN SEC]', 0FH
0256 54494F4E                
025A 5B494E20                
025E 5345435D                
0262 0F                      
0263 5B312D39        178     DURATION_MSG: DB '[1-9]: ', 0FH
0267 5D3A200F                
026B 20202020        179     CONFIRM: DB '    CONFIRM!',0FH
026F 434F4E46                
0273 49524D21                
0277 0F                      
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     5

0278 5345430F        180     SECONDS: DB 'SEC', 0FH
027C 20204245        181     BELL_ACK: DB '  BELL IS SET',0FH
0280 4C4C2049                
0284 53205345                
0288 540F                    
                     182     ;******************************************************************************************
                             *****
                     183     ;                                                                        END of LOOK-UP TAB
                             LES
                     184     ;******************************************************************************************
                             *****
                     185     
                     186     
                     187     
                     188     ;******************************************************************************************
                             *****
                     189     ;This module takes the starting address of the string to be displayed in the DPTR and loops
                     190     ;till it find the string terminator #0FH and also turns the cursor OFF
                     191     ;Parameters:DPTR holds the starting address of the string
                     192     ;Return:
                     193     ;DEPENDANCIES:DISP,CMD
                     194     ;******************************************************************************************
                             *****
028A                 195     DISPCH2:
028A 00              196             nop
028B 740C            197             MOV A, #0CH                     ;TURNING OFF THE CURSOR
028D 3149            198             ACALL CMD
028F                 199             UP11:   
028F E4              200                     CLR A
0290 93              201                     MOVC A,@A+DPTR          ;use lookup table to get ascii character
0291 B40F01          202                     CJNE A,#0FH,SKIP        ;loop till 0xfh is encountered
0294 22              203                     RET             
0295                 204             SKIP:   
0295 A3              205                     INC DPTR
0296 51B4            206                     ACALL  DISP             
0298 80F5            207                     SJMP UP11
                     208     
                     209     ;******************************************************************************************
                             *****
                     210     ;This module is used to display the 3 lettered day in the LCD give the number of 
                     211     ;corresponding day in Acc.
                     212     ;Parameters:Acc. holds the day number
                     213     ;Return:None
                     214     ;DEPENDANCIES:DISP
                     215     ;******************************************************************************************
                             *****
029A                 216     DISP_DAY:
029A C001            217             PUSH 01H
029C 75F003          218             MOV B, #3H                              ;IN THE LOOK-UP TABLE NAMED 'WEEKDAY' EACH 
                             WEEKDAY LENGTH IS 3
029F A4              219             MUL AB                                  ;HENCE TO GET ACTUAL OFFSET WE HAVE TO MULT
                             IPLY BASE BY 3 AND ADD IT TO DPTR
02A0                 220             UP12:
02A0 F5F0            221                     MOV B,A                         ;just saving the content of Acc.
02A2 7904            222                     MOV R1, #04H            ;counter
02A4 9001A6          223                     MOV DPTR, #WEEKDAY      
02A7                 224                     UP13:
02A7 E5F0            225                             MOV A,B                 ;you might assume that why to again load to
                              Acc. but after first iteration this mov operation is neccessary
02A9 93              226                             MOVC A,@A+DPTR  ;use lookup table to get ascii character
02AA D903            227                             DJNZ R1,SKIP1
02AC D001            228                             POP 01H
02AE 22              229                             RET             
02AF                 230             SKIP1:  
02AF A3              231                     INC DPTR
02B0 51B4            232                     ACALL  DISP
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     6

02B2 80F3            233                     SJMP UP13
                     234     
                     235     ;******************************************************************************************
                             ******
                     236     ;This module takes character to be displayed in the Acc. and displys it on LCD(only one cha
                             r)
                     237     ;Parameters:Acc.  
                     238     ;Return:None
                     239     ;DEPENDANCIES: READY
                     240     ;******************************************************************************************
                             ******
02B4                 241     DISP:
02B4 3156            242             ACALL READY     
02B6 F580            243             MOV 80H, A                              ;80h is the address of the pin on 8051 whic
                             h is connected to the 
02B8 D2A5            244             SETB 0A5H                               ; high RS
02BA C2A6            245             CLR     0A6H                            ; A6h is the R/WBAR
02BC D2A7            246             SETB 0A7H                               ; high to low En 
02BE C2A7            247             CLR     0A7H
02C0 22              248             RET
                     249     
                     250     ;******************************************************************************************
                             ******
                     251     ; This module generates delay of 1sec
                     252     ;******************************************************************************************
                             ******
02C1                 253     DELAY_1SEC:
02C1 7F0A            254             MOV R7,#10      
02C3                 255             HERE4:
02C3 7EFF            256                     MOV R6,#0ffh        ;delay routine for firing
02C5                 257                     HERE31: 
02C5 7DFF            258                                     MOV     R5,#0ffH
02C7                 259                                     REPEAT1:
02C7 DDFE            260                                             DJNZ    R5,REPEAT1
02C9 DEFA            261                                         DJNZ    R6,HERE31
02CB DFF6            262                                         DJNZ        R7,HERE4        
02CD 22              263                                             RET
                     264     
02CE                 265     DELAY_500MSEC:
02CE C007            266             PUSH 07H        ;these push instruction will ensure that everything will work fine 
                             by saving the                        
                     267                                     ;... value of the register used by the function that called
                              it
02D0 C006            268             PUSH 06H
02D2 C004            269             PUSH 04H
02D4 7F05            270             MOV R7,#5       
02D6                 271             HERE41:
02D6 7EFF            272                     MOV R6,#0ffh        ;delay routine for firing
02D8                 273                     HERE311: 
02D8 7CFF            274                                     MOV     R4,#0ffH
02DA                 275                                     REPEAT11:
02DA DCFE            276                                             DJNZ    R4,REPEAT11
02DC DEFA            277                                         DJNZ    R6,HERE311
02DE DFF6            278                                         DJNZ        R7,HERE41       
02E0 D004            279                                         POP 04H
02E2 D006            280                                         POP 06H
02E4 D007            281                                         POP 07H
02E6 22              282                                             RET
                     283     
                     284     ;******************************************************************************************
                             *******
                     285     ;This module is used to recognize the hitting of the key. As the JNB performs the sjmp litt
                             le
                     286     ;technique is used to avoid the out of range jmp situation.
                     287     ;Parameters:None
                     288     ;Return:None
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     7

                     289     ;DEPENDANCIES: SETT_TIME, SETT_BELL, EMMERGENCY
                     290     ;******************************************************************************************
                             *******
02E7                 291     CHECK_KEY:
02E7 30B307          292             JNB TIME_KEY, SETT_TIME ;PLEASE NOTICE THE DOUBLE 'T'
                     293             ;SJMP SETT_TIME
02EA                 294             CHECKING_BELL:
02EA 30B408          295             JNB BELL_KEY, SETT_BELL
02ED                 296             CHECKING_EMERGENCY:
02ED 30B509          297             JNB EMRG_KEY, EMMERGENCY
02F0                 298             END_CHECK_KEY:
02F0 22              299             RET
                     300     
                     301     ;******************************************************************************************
                             *******
                     302     ;Following three labels are just used to redirect the control to appropriate locations
                     303     ;these are needed in order to avoid the below listed two reasons
                     304     ;******************************************************************************************
                             *******
                     305     
02F1                 306     SETT_TIME:
02F1 B17A            307             ACALL SET_TIME                  ;WE REQUIRE THIS MANIPULATION BECAUSE
                     308                                                             ;1)JNB INTERNALLY SJMPs AND SET_TIM
                             E IS OUT OF IT'S RANGE                               
                     309                                                             ;2)ITS JMP AND NOT CALL AND IN FUTU
                             RE WHILE ADDING NEW FEATURES IT MAY CAUSE BUG
02F3 80F5            310             SJMP CHECKING_BELL 
02F5                 311     SETT_BELL:
02F5 71A9            312             ACALL SET_BELL
                     313     
02F7 80F4            314             SJMP CHECKING_EMERGENCY
02F9                 315     EMMERGENCY:
02F9 719D            316             ACALL EMERGENCY
02FB 80F3            317             SJMP END_CHECK_KEY
                     318     
                     319     
                     320     ;******************************************************************************************
                             *******
                     321     ;This module is used to read the key hit
                     322     ;Parameters:None
                     323     ;Return:Acc
                     324     ;DEPENDANCIES:DELAY_1SEC
                     325     ;******************************************************************************************
                             *******
                     326     
02FD                 327     KEYPD:   
02FD 7D00            328             MOV R5,#00           
02FF 7590FE          329             MOV 90H,#0FEH   ;scan 1st row
0302 E590            330             MOV A,90H
0304 64FE            331             XRL A,#0FEH
0306 702A            332             JNZ ROW
                     333                     
0308 ED              334             MOV A,R5
0309 2403            335             ADD A,#03H
030B FD              336             MOV R5,A
                     337                   
030C 7590FD          338             MOV 90H,#0FDH   ;scan 2nd row
030F E590            339             MOV A,90H
0311 64FD            340             XRL A,#0FDH
0313 701D            341             JNZ ROW
0315 ED              342             MOV A,R5
0316 2403            343             ADD A,#03H
0318 FD              344             MOV R5,A
                     345                  
0319 7590FB          346             MOV 90H,#0FBH   ;scan 3rd row
031C E590            347             MOV A,90H
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     8

031E 64FB            348             XRL A,#0FBH
0320 7010            349             JNZ ROW
0322 ED              350             MOV A,R5
0323 2403            351             ADD A,#03H
0325 FD              352             MOV R5,A
                     353     
0326 7590F7          354             MOV 90H,#0F7H   ;scan 4th row
0329 E590            355             MOV A,90H
032B 64F7            356             XRL A,#0F7H
032D 7003            357             JNZ ROW
032F 0202FD          358             LJMP KEYPD
                     359      
0332                 360             ROW:  
0332 E590            361                     MOV A,90H
0334 54F0            362             ANL A,#0F0H
0336 C4              363             SWAP A
0337                 364             REDO:  
0337 13              365                     RRC A
0338 5003            366                     JNC KEY
033A 0D              367                     INC R5
033B 80FA            368                     SJMP REDO
033D                 369             KEY:
033D 51CE            370                     ACALL DELAY_500MSEC
033F 7590F0          371                     MOV 90H,#0F0H
0342 00              372                     NOP
0343 00              373                     NOP
0344 E590            374                     MOV     A,90H
                     375     
0346 64F0            376                     XRL     A,#0F0H
0348 70F3            377                     JNZ     KEY
034A ED              378                     MOV     A,R5
034B 9001C3          379                     MOV DPTR,#KEYCODE
034E 93              380                     MOVC    A,@A+DPTR
                     381     
034F 22              382             RET
                     383     
                     384     ;******************************************************************************************
                             *******
                     385     ;This module returns the validity of the entered PIN in the Acc. 
                     386     ;Parameters:None
                     387     ;Return: Acc.
                     388     ;DEPENDANCIES: FIRST, READ_PASSWORD, SECOND, DISPCH2, KEYPD, CMD, DISP
                     389     ;******************************************************************************************
                             *******
                     390     
0350                 391     VER_PASSWORD:
0350 7401            392             MOV A, #01H
0352 3149            393             ACALL CMD
0354 9001CF          394             MOV DPTR, #AUTH_MSG
0357 518A            395             ACALL DISPCH2
0359 3144            396             ACALL SECOND
035B 7806            397             MOV R0, #06H
035D 7414            398             MOV A, #14H
035F                 399             LOOP5:
035F 3149            400             ACALL CMD
0361 D8FC            401             DJNZ R0, LOOP5
0363 740E            402             MOV A, #0EH
0365 3149            403             ACALL CMD
0367 12081D          404             LCALL READ_PASSWORD
036A 7854            405             MOV R0, #54H
036C 756400          406             MOV FLAG, #00H
036F 7904            407             MOV R1, #4H
0371                 408             LOOP4:
0371 86F0            409             MOV B, @R0
0373 51FD            410             ACALL KEYPD
0375 B42A02          411             CJNE A, #'*', N103
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE     9

0378 80D6            412             SJMP VER_PASSWORD
037A                 413             N103:
037A B5F01B          414             CJNE A, B, SET_FLAG
037D                 415             N102:
037D 742A            416             MOV A, #'*'
037F 51B4            417             ACALL DISP
0381 08              418             INC R0
0382 D9ED            419             DJNZ R1,LOOP4
0384 E564            420             MOV A, FLAG
0386 75F000          421             MOV B, #00H
0389 B5F001          422             CJNE A, B, AUTH_FAIL
038C 22              423             RET
038D                 424             AUTH_FAIL:
038D 7401            425                     MOV A, #01H
038F 3149            426                     ACALL CMD
0391 9001EE          427                     MOV DPTR, #AUTH_FAIL_MSG
0394 313A            428                     ACALL DISP_MSG
0396 80B8            429                     SJMP VER_PASSWORD
0398                 430             SET_FLAG:
0398 7564FF          431                     MOV FLAG, #0FFH
039B 80E0            432                     SJMP N102               
                     433     
039D                 434     EMERGENCY:
039D 7150            435             ACALL VER_PASSWORD
039F 7401            436             MOV A, #01H
03A1 3149            437             ACALL CMD
03A3 9001FE          438             MOV DPTR, #EMERGENCY_MSG
03A6 518A            439             ACALL DISPCH2
                     440             ;DO WHATEVER NEEDS TO BE DONE
03A8 22              441             RET
                     442     
                     443     
03A9                 444     SET_BELL:
                     445             ;ACALL VER_PASSWORD
03A9                 446             SET_BELL_VERIFIED:
03A9 7401            447             MOV A, #01H
03AB 3149            448             ACALL CMD
03AD 90020B          449             MOV DPTR, #BELL_MESSAGE
03B0 518A            450             ACALL DISPCH2
03B2 3144            451             ACALL SECOND
03B4 90021A          452             MOV DPTR, #BELL_OPTIONS
03B7 518A            453             ACALL DISPCH2
03B9 740E            454             MOV A, #0EH
03BB 3149            455             ACALL CMD
03BD                 456             LOOP8: 
03BD 51FD            457                     ACALL KEYPD
03BF 75F031          458                     MOV B, #31H
03C2 B5F002          459                     CJNE A, B, N14
03C5 81EB            460                     JMP NEW_BELL
03C7                 461                     N14:
03C7 75F032          462                     MOV B, #32H
03CA B5F0F0          463             CJNE A, B, LOOP8
                     464     
03CD                 465             EDIT_BELL:
03CD B1C5            466             ACALL INPUT_DAY         ;now accumulator will contain the day value
03CF F553            467             MOV TEMP_DAY, A
                     468             ;Load number of bells available for that day
03D1 900000          469             MOV DPTR, #00H
03D4 F582            470             MOV DPL, A
03D6 7950            471             MOV R1, #50H
03D8 756601          472             MOV COUNT9, #01H
03DB F132            473             ACALL READ_DATA
03DD 7950            474             MOV R1, #50H
03DF E7              475             MOV A, @R1
                     476             
03E0 75F000          477             MOV B, #00H
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    10

03E3 B5F009          478             CJNE A, B, HAS_BELL_ENTRY       ;if its non zero then that means it has entry
03E6 900234          479             MOV DPTR, #NO_BELL
03E9 518A            480             ACALL DISPCH2
03EB 51C1            481             ACALL DELAY_1SEC
03ED 80BA            482             SJMP SET_BELL_VERIFIED          ;if its zero then give user chance to make an entry
                     483     
03EF                 484             HAS_BELL_ENTRY:
03EF E553            485             MOV A, TEMP_DAY
03F1 900000          486             MOV DPTR, #00H
03F4 F582            487             MOV DPL, A
03F6 7950            488             MOV R1, #50H
03F8 756601          489             MOV COUNT9, #01H
03FB F132            490             ACALL READ_DATA
03FD 7950            491             MOV R1, #50H
03FF E7              492             MOV A, @R1
0400 C0E0            493             PUSH ACC
0402 7401            494             MOV A, #01H                             ;clear screen
0404 3149            495             ACALL CMD
0406 900228          496             MOV DPTR, #BELL_NUMBER_MSG      ;display number of bells i.e., max count
0409 518A            497             ACALL DISPCH2
040B D0E0            498             POP ACC                                         ;will contain max serial number
040D 1208DA          499             LCALL HEX_BCD                           ;converts to bcd and output will be in acc[
                             lower two dig] and r2[only for 3 dig BCD]
0410 C0E0            500             PUSH ACC                                        ;saving the bcd converted value 
0412 D1DB            501             ACALL DISP_2DIG_NO                      
0414 745D            502             MOV A, #']'
0416 51B4            503             ACALL DISP                                      
0418 3144            504             ACALL SECOND
041A 740F            505             MOV A, #0FH
041C 3149            506             ACALL CMD
041E D0E0            507             POP ACC                                         ;copy the value of max. serial numb
                             er in ACC
0420 85E040          508             MOV 40H, ACC
0423 1208C2          509             LCALL UNPACK                            ;now r2 and r3 will contain ascii value of 
                             the bcd number
0426 75F004          510             MOV B, #04H
0429 7414            511             MOV A, #14H
042B                 512             LOOP9:
042B 3149            513             ACALL CMD
042D D5F0FB          514             DJNZ B, LOOP9
0430 51FD            515             ACALL KEYPD
0432 51B4            516             ACALL DISP
0434 B42A02          517             CJNE A, #'*', CONTINUE_1
0437 80B6            518             SJMP HAS_BELL_ENTRY
0439                 519             CONTINUE_1:
0439 B42302          520             CJNE A, #'#', CONTINUE_2
043C 81EC            521             JMP ERROR_EDIT_BELL
043E                 522             CONTINUE_2:
043E C3              523             CLR C
043F C0E0            524             PUSH ACC                                        ;contains the 1st number in acsii m
                             ode 
0441 9B              525             SUBB A, R3                                      ;r3= msb of the max serial number i
                             n ascii
0442 4004            526             JC NEXT_ENTRY               
0444 6002            527             JZ NEXT_ENTRY
0446 81EC            528             JMP ERROR_EDIT_BELL
0448                 529             NEXT_ENTRY:
0448 D0E0            530             POP ACC                                         ;contains ascii value of first endt
                             ered key
044A 9430            531             SUBB A, #30H 
044C C4              532             SWAP A 
044D F9              533             MOV R1, A                                       ;now r1 will contain msb of the ent
                             ered number
044E C001            534             PUSH 01H                                        ;save this value
0450 51FD            535             ACALL KEYPD
0452 51B4            536             ACALL DISP
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    11

0454 C3              537             CLR C
0455 B42A02          538             CJNE A, #'*', CONTINUE_3
0458 8095            539             SJMP HAS_BELL_ENTRY
045A                 540             CONTINUE_3:
045A B42302          541             CJNE A, #'#', CONTINUE_4
045D 81EC            542             JMP ERROR_EDIT_BELL
045F                 543             CONTINUE_4:
045F C3              544             CLR C 
0460 C0E0            545             PUSH ACC
0462 9A              546             SUBB A, R2
0463 4004            547             JC DONE_ENTERING_SERIAL
0465 6002            548             JZ DONE_ENTERING_SERIAL
0467 81EC            549             JMP ERROR_EDIT_BELL
0469                 550             DONE_ENTERING_SERIAL:
0469 D0E0            551             POP ACC                                 ;now A will contain the second digit in asc
                             ii format
046B C3              552             CLR C
046C 9430            553             SUBB A, #30H
046E D001            554             POP 01H
0470 29              555             ADD A, R1                               ;now acc will contain the user entered seri
                             al in bcd mode
0471 1208EB          556             LCALL BCD_HEX
0474 F57C            557             MOV SERIAL, A                   ;saving the value of serial safely in the RAM
0476 855383          558             MOV DPH, TEMP_DAY
0479 75F003          559             MOV B, #03H
047C A4              560             MUL AB
047D F582            561             MOV DPL,A
047F 7954            562             MOV R1, #54H
0481 756603          563             MOV COUNT9, #03H
0484 F132            564             ACALL READ_DATA
0486 855452          565             MOV HOURS, 54H
0489 855551          566             MOV MIN, 55H
048C 7420            567             MOV A, #' '
048E 51B4            568             ACALL DISP
0490 1206E5          569             LCALL DISP_TIME
0493                 570             WAIT_FOR_ENTER:
0493 51FD            571             ACALL KEYPD
0495 B42A02          572             CJNE A, #2AH, N15
0498 61EF            573             JMP HAS_BELL_ENTRY
049A                 574             N15:
049A B423F6          575             CJNE A, #23H, WAIT_FOR_ENTER
049D 75F001          576             MOV B, #01H
04A0 D129            577             ACALL INPUT_HOUR_MINUTE
04A2 B128            578             ACALL INPUT_DURATION
04A4 7401            579             MOV A, #01H
04A6 120149          580             LCALL CMD
04A9 90026B          581             MOV DPTR, #CONFIRM
04AC 518A            582             ACALL DISPCH2
04AE 3144            583             ACALL SECOND
04B0 1206E5          584             LCALL DISP_TIME
04B3 7414            585             MOV A, #14H
04B5 3149            586             ACALL CMD
04B7 E553            587             MOV A, TEMP_DAY
04B9 519A            588             ACALL DISP_DAY
04BB 7414            589             MOV A, #14H
04BD 3149            590             ACALL CMD
04BF E56A            591             MOV A, DURATION
04C1 2430            592             ADD A, #30H
04C3 51B4            593             ACALL DISP
04C5 900278          594             MOV DPTR, #SECONDS
04C8 518A            595             ACALL DISPCH2
04CA                 596             WAIT_FOR_ENTER_KEY_1:
04CA 51FD            597                     ACALL KEYPD
04CC B42A02          598                     CJNE A, #2AH, N17
04CF 61CD            599                     JMP EDIT_BELL
04D1                 600                     N17:
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    12

04D1 B423F6          601                     CJNE A, #23H, WAIT_FOR_ENTER_KEY_1
04D4 7401            602             MOV A, #01H
04D6 3149            603             ACALL CMD
04D8 90027C          604             MOV DPTR, #BELL_ACK
04DB 518A            605             ACALL DISPCH2
04DD 855383          606             MOV DPH, TEMP_DAY
04E0 E57C            607             MOV A, SERIAL
04E2 75F003          608             MOV B, #03H
04E5 A4              609             MUL AB
04E6 F582            610             MOV DPL, A
04E8 91FB            611             ACALL SAVE_BELL
04EA 22              612             RET
                     613     
04EB                 614             NEW_BELL:
04EB 22              615             RET
04EC                 616     ERROR_EDIT_BELL:
04EC 7401            617             MOV A, #01H
04EE 3149            618             ACALL CMD
04F0 900197          619             MOV DPTR, #ERROR_MSG
04F3 313A            620             ACALL DISP_MSG
04F5 51C1            621             ACALL DELAY_1SEC
04F7 51C1            622             ACALL DELAY_1SEC
04F9 61EF            623             JMP HAS_BELL_ENTRY
                     624     
04FB                 625     SAVE_BELL:
04FB 756603          626             MOV COUNT9, #03H
04FE 855254          627             MOV 54H, HOURS
0501 855440          628             MOV 40H, 54H
0504 1206DB          629             LCALL DISP_2DIG_NO
0507 855155          630             MOV 55H, MIN
050A 855540          631             MOV 40H, 55H
050D 1206DB          632             LCALL DISP_2DIG_NO
0510 856A56          633             MOV 56H, DURATION
0513 855640          634             MOV 40H, 56H
0516 1206DB          635             LCALL DISP_2DIG_NO
0519 A954            636             MOV R1, 54H
051B 1202C1          637             LCALL DELAY_1SEC
051E 1202C1          638             LCALL DELAY_1SEC
0521 1202C1          639             LCALL DELAY_1SEC
0524 1206F4          640             LCALL WRITE_DATA
0527 22              641             RET
                     642     
                     643     ;******************************************************************************************
                             *******
                     644     ;This module is used to enter the duration Option
                     645     ;Parameter:None
                     646     ;Return: value of duration option in Acc
                     647     ;DEPENDANCIES: CMD, KEYPD, SECOND, FIRST, DISPCH2
                     648     ;******************************************************************************************
                             *******
0528                 649     INPUT_DURATION:
0528 7401            650             MOV A, #01H
052A 3149            651             ACALL CMD
052C 900252          652             MOV DPTR, #EDIT_DURATION
052F 518A            653             ACALL DISPCH2
0531 3144            654             ACALL SECOND
0533 900263          655             MOV DPTR, #DURATION_MSG
0536 12028A          656             LCALL DISPCH2
0539 740F            657             MOV A, #0FH
053B 3149            658             ACALL CMD
053D 51FD            659             ACALL KEYPD
053F 51B4            660             ACALL DISP
0541 B43004          661             CJNE A, #'0', CHECK_NEXT_OPTION_1
0544 B16D            662             ACALL ERROR_ENTRY
0546 80E0            663             SJMP INPUT_DURATION
0548                 664             CHECK_NEXT_OPTION_1:
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    13

0548 B42A02          665             CJNE A, #'*' , CHECK_NEXT_OPTION_2
054B 80DB            666             SJMP INPUT_DURATION
054D                 667             CHECK_NEXT_OPTION_2:
054D B42304          668             CJNE A, #'#', CORRECT_ENTRY
0550 B16D            669             ACALL ERROR_ENTRY
0552 80D4            670             SJMP INPUT_DURATION
0554                 671             CORRECT_ENTRY:
0554 C3              672             CLR C
0555 75F030          673             MOV B, #30H
0558 95F0            674             SUBB A, B
055A C0E0            675             PUSH ACC
055C                 676             WAIT_FOR_ENTER_KEY:
055C 51FD            677                     ACALL KEYPD
055E B42A04          678                     CJNE A, #2AH, N16
0561 D0E0            679                     POP ACC                 ;JUST TO FREE THE STACK MEM. WHILE LOOPING. IF NOT 
                             PRESENT STACK WILL OVERFLOW IF * IS PRESSED MANY TIMES
0563 80C3            680                     JMP INPUT_DURATION
0565                 681                     N16:
0565 B423F4          682                     CJNE A, #23H, WAIT_FOR_ENTER_KEY
0568 D0E0            683             POP ACC
056A F56A            684             MOV DURATION, A
056C 22              685             RET
056D                 686     ERROR_ENTRY:
056D 7401            687             MOV A, #01H
056F 120149          688             LCALL CMD
0572 900197          689             MOV DPTR, #ERROR_MSG
0575 313A            690             ACALL DISP_MSG
0577 51C1            691             ACALL DELAY_1SEC
0579 22              692     RET
                     693     ;******************************************************************************************
                             *******
                     694     ;This module sets the time and day. PIN is required to set the time. If incorrect password 
                             is 
                     695     ;entered then user will again be asked to enter password and only reset breaks the loop
                     696     ;Parameters:None
                     697     ;Return:None(affects the RTC time)
                     698     ;DEPENDANCIES: VER_PASSWORD, FIRST, SECOND, DISP_MSG, DISP_DAY, CMD, KEYPD, DISP, ERROR, ER
                             ROR_DAY
                     699     ;                       DELAY_1SEC, READ_RTC
                     700     ;******************************************************************************************
                             *******
                     701     
057A                 702     SET_TIME:
057A 7150            703             ACALL VER_PASSWORD              ;ENTER PASSWORD MODULE
057C 75F000          704             MOV B, #00H
057F D129            705             ACALL INPUT_HOUR_MINUTE         ;THIS FUNCTION PLACES THE VALUE OF READ NUMBER IN H
                             OURS AND MIN
0581 756001          706             MOV ADD_LOWL, #01H
0584 855161          707             MOV DAVAVA, MIN
0587 120829          708             LCALL WRITE_BYTE
058A 756002          709             MOV ADD_LOWL, #02H
058D 855261          710             MOV DAVAVA, HOURS
0590 120829          711             LCALL WRITE_BYTE                ;AFTER EXECUTION OF THIS MODULE RTC WILL BE SET
                     712             ;STARTING TO READ THE WEEK DAY
0593 B1C5            713             ACALL INPUT_DAY                 ;day value will be present in acc.
0595 756003          714             MOV ADD_LOWL, #03H              ;starting to send the data to RTC
0598 F561            715             MOV DAVAVA, A
059A 120829          716             LCALL WRITE_BYTE                ;write the data to RTC
                     717     
059D 7401            718             MOV A, #01H
059F 3149            719             ACALL CMD
05A1 9001DF          720             MOV DPTR, #MESSAGE5
05A4 313A            721             ACALL DISP_MSG
05A6 3144            722             ACALL SECOND
05A8 F1D2            723             ACALL READ_RTC
05AA C001            724             PUSH 01H
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    14

05AC 7903            725             MOV R1, #03H
05AE 7414            726             MOV A, #14H
05B0                 727             LOOP7:
05B0 3149            728             ACALL CMD
05B2 D9FC            729             DJNZ R1, LOOP7
05B4 D001            730             POP 01H
05B6 D1E5            731             ACALL DISP_TIME
05B8 7420            732             MOV A, #20H
05BA 51B4            733             ACALL DISP
05BC E567            734             MOV A, DAY
05BE 75F003          735             MOV B, #3H                              ;IN THE LOOK-UP TABLE NAMED 'WEEKDAY' EACH 
                             WEEKDAY LENGTH IS 3
05C1 A4              736             MUL AB                                  ;HENCE TO GET ACTUAL OFFSET WE HAVE TO MULT
                             IPLY BASE BY 3 AND ADD IT TO DPTR
05C2 519A            737             ACALL DISP_DAY                  ;while calling the DISP_DAY module make sure that 
                     738     
05C4 22              739             RET
                     740     
                     741     ;******************************************************************************************
                             *******
                     742     ;This module takes input from user to enter the day in number from 1-7 and also displays th
                             e 3
                     743     ;lettered corresponding day beside it
                     744     ;Parameter:None
                     745     ;Return:day value in Acc
                     746     ;DEPENDANCIES:DISP_MSG, SECOND, CMD, ERROR_DAY, KEYPD, DISP_DAY
                     747     ;******************************************************************************************
                             *******
05C5                 748     INPUT_DAY:
05C5 7401            749             MOV A, #1H                              ;CLEARING THE SCREEN TO BEGIN FRESH
05C7 3149            750             ACALL CMD
05C9 90018A          751             MOV DPTR, #MESSAGE3
05CC 313A            752             ACALL DISP_MSG
05CE 3144            753             ACALL SECOND                    ;BRINGING THE CURSOR TO SECOND LINE FIRST POSITION
05D0 3149            754             ACALL CMD
05D2 740F            755             MOV A, #0FH                     ;TURNING ON THE CURSOR
05D4 3149            756             ACALL CMD
05D6 7805            757             MOV R0, #5H                     ;SHIFTING THE CURSOR TO THE MIDDLE
05D8 7414            758             MOV A, #14H                     
05DA                 759             LOOP6:
05DA 3149            760             ACALL CMD
05DC D8FC            761             DJNZ R0, LOOP6
05DE 51FD            762             ACALL KEYPD                             ;READ A CHARACTER
05E0 51B4            763             ACALL DISP
05E2 B42302          764             CJNE A, #23H, N10               ;COMPARING THE VALUE OF KEY WITH #
05E5 8031            765             SJMP ERROR_DAY
05E7                 766             N10:
05E7 B42A02          767             CJNE A, #2AH, N11               ;COMPARING THE VALUE OF KEY WITH *
05EA 802C            768             SJMP ERROR_DAY
05EC                 769             N11:
05EC B43002          770             CJNE A, #30H, N12               ;COMPARING THE VALUE OF KEY WITH 0 AS VALID CHARACT
                             ERS ARE ONLY 1-7
05EF 8027            771             SJMP ERROR_DAY
05F1                 772             N12:
05F1 F9              773             MOV R1,A                                ;SAVING THE VALUE OF A
05F2 C001            774             PUSH 01H                                ;THE DISP_DAY FUNCTION WIHICH WE WILL USE L
                             ATER WILL USE R1 AS ONE OF ITS VARIABLES
05F4 C3              775             CLR C                                   ;... SO WE HAVE TO USE PUSH TO SAVE R1
05F5 9438            776             SUBB A, #38H                    ;ERROR CHECKING BY CHECKING IF THE ANSWER COMES OUT
                              NEGATIVE
05F7 501F            777             JNC ERROR_DAY                   ;EX: INPUT IS 37H(VALID) SO 37H-38H=-1H HENCE C=1. 
                             HENCE VALID
05F9 C3              778             CLR C                                   ;EX: IF INPUT IS 39H(INVALID) SO ASNWER IS 
                             1H AND C=0. HENCE INVALID
05FA 7414            779             MOV A, #14H                             ;SHIFTING RIGHT CURSOR TO GIVE SPACE
05FC 3149            780             ACALL CMD 
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    15

05FE E9              781             MOV A,R1                                ;RESTORING THE VALUE OF A
05FF 9430            782             SUBB A, #30H                    ;GETTING ACTUAL VALUE FROM ASCII VALUE
0601 519A            783             ACALL DISP_DAY                  ;DISPLAYING THE DAY AS SOON AS WE PRESS THE KEY
0603 740C            784             MOV A, #0CH
0605 3149            785             ACALL CMD
0607                 786             LOOP3:                                  ;THIS LOOP IS FOR USER TO ENTER 'ENTER KEY'
0607 51FD            787             ACALL KEYPD                             ;INPUTTING THE ENTER KEY OR CLEAR KEY
0609 B42A02          788             CJNE A, #2AH, N13               ;IF USER ENTERS * WHOLE SCREEN IS RESET
060C 80B7            789             JMP INPUT_DAY
060E                 790             N13:
060E B423F6          791             CJNE A, #23H, LOOP3     ;IF USER ENTERS # IT IS CONSIDERED AS 'ENTER KEY'
0611 D001            792             POP 01H                                 ;01H STANDS FOR R1
0613 E9              793             MOV A, R1
0614 C3              794             CLR C 
0615 9430            795             SUBB A, #30H                    ;USE THIS VALUE OF DAY
0617 22              796             RET
                     797     
0618                 798     ERROR_DAY:
0618 313F            799             ACALL FIRST                     ;MOVING THE CURSOR TO FIRST LINE AS THE ERROR HAS T
                             O BE PRINTED IN FIRST LINE
061A 740C            800             MOV A, #0CH                     ;TURNING OFF THE CURSOR
061C 3149            801             ACALL CMD
061E 900197          802             MOV DPTR, #ERROR_MSG
0621 313A            803             ACALL DISP_MSG
0623 51C1            804             ACALL DELAY_1SEC
0625 51C1            805             ACALL DELAY_1SEC
0627 809C            806             JMP INPUT_DAY
                     807     
                     808     ;******************************************************************************************
                             *******
                     809     ;This module is used to read hour and minute from the keypad. calling function must specify
                              whether 
                     810     ;it is set_time or set_bell by passing value on register B.
                     811     ;Parameter:B -> 0H if SET_TIME B->01h if SET_BELL
                     812     ;Return: value will be placed in HOURS AND MIN
                     813     ;DEPENDANCIES:DISP, DISPCH2, DISP_MSG, CMD, FIRST, SECOND, KEYPD
                     814     ;******************************************************************************************
                             *******
0629                 815     INPUT_HOUR_MINUTE:
0629 7401            816             MOV A, #01H
062B 3149            817             ACALL CMD
062D 7401            818             MOV A, #01H 
062F C3              819             CLR C
0630 95F0            820             SUBB A, B
0632 6005            821             JZ ITS_BELL
0634 900174          822             MOV DPTR, #MESSAGE1
0637 8003            823             SJMP NEXT
0639                 824             ITS_BELL:
0639 900243          825             MOV DPTR, #NEW_BELL_MSG
063C                 826             NEXT:
063C 313A            827             ACALL DISP_MSG
063E 3144            828             ACALL SECOND                    ;MOVING CURSOR TO SECOND LINE
0640 90017F          829             MOV DPTR, #MESSAGE2
0643 313A            830             ACALL DISP_MSG
0645 3144            831             ACALL SECOND
0647 740F            832             MOV A, #0FH                     ;TURNING ON THE CURSOR
0649 3149            833             ACALL CMD
064B 7905            834             MOV R1, #5H                     ;SHIFTING CURSOR 5 TIMES
064D 7414            835             LOOP1: MOV A, #14H      
064F 3149            836                     ACALL CMD
0651 D9FA            837             DJNZ R1, LOOP1
                     838             ;STARTING TO READ THE VALUE OF HOUR
0653 51FD            839             ACALL KEYPD
0655 51B4            840             ACALL DISP
0657 B42302          841             CJNE A, #23H, N1                ;COMPARING THE VALUE OF KEY WITH #
065A 8032            842             SJMP ERROR
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    16

065C                 843             N1:
065C B42A03          844             CJNE A, #2AH, N2                ;COMPARING THE VALUE OF KEY WITH *
065F 020629          845             LJMP INPUT_HOUR_MINUTE
0662                 846             N2:
0662 F9              847             MOV R1,A
0663 C3              848             CLR C
0664 9433            849             SUBB A, #33H                    ;i.e., IF ENTERED NUMBER IS GREATER THAN 2(EXAMPLE 
                             IS 30 HOURS)
0666 5026            850             JNC ERROR
0668 C3              851             CLR C
0669 E9              852             MOV A, R1
066A 9430            853             SUBB A, #30H                    ;ASCII ADJUSTMENTS
066C C4              854             SWAP A                                  ;EX: 31H-30H=01H AFTER SWAPPING IT WILL BE 
                             10H
066D F9              855             MOV R1, A                               ;SAVING THE VALUE OF A
066E 51FD            856             ACALL KEYPD
0670 51B4            857             ACALL DISP
0672 B42302          858             CJNE A, #23H, N3                ;COMPARING THE VALUE OF KEY WITH #
0675 8017            859             JMP ERROR
0677                 860             N3:
0677 B42A02          861             CJNE A, #2AH, N4                ;COMPARING THE VALUE OF KEY WITH *
067A 80AD            862             JMP INPUT_HOUR_MINUTE
067C                 863             N4:
067C C3              864             CLR C
067D 9430            865             SUBB A, #30H                    ;ADJUSTMENTS
067F 29              866             ADD A,R1                                ;EXAMPLE CONTINUED: NOW PREVIOUS 10H IS ADD
                             ED WITH LETS SAY 2H GIVES 12H WHICH IS PASSED TO RTC IF ITS VALID
0680 F9              867             MOV R1,A                                ;AGAIN SAVING
0681 C3              868             CLR C
0682 9425            869             SUBB A,#25H                             ;CHECKING IF THE HOUR VALUE IS GRATER THAN 
                             24
0684 5008            870             JNC ERROR 
0686 7414            871             MOV A, #14H                             ;SHIFT CURSOR RIGHT ONCE TO AVOID THE COLON
0688 3149            872             ACALL CMD
068A 8952            873             MOV HOURS, R1
068C 800D            874             SJMP READ_MINUTES
                     875     
                     876             ;START OF ERROR HANDLING
068E                 877             ERROR:
068E 313F            878                     ACALL FIRST
0690 900197          879                     MOV DPTR, #ERROR_MSG
0693 313A            880                     ACALL DISP_MSG
0695 51C1            881                     ACALL DELAY_1SEC
0697 51C1            882                     ACALL DELAY_1SEC
0699 808E            883             JMP INPUT_HOUR_MINUTE
                     884     
                     885             ;STARTING TO READ THE MINUTES 
069B                 886             READ_MINUTES:
069B 51FD            887             ACALL KEYPD
069D 51B4            888             ACALL DISP
069F B42302          889             CJNE A, #23H, N5                ;COMPARING THE VALUE OF KEY WITH #
06A2 80EA            890             SJMP ERROR
06A4                 891             N5:
06A4 B42A03          892             CJNE A, #2AH, N6                ;COMPARING THE VALUE OF KEY WITH *
06A7 020629          893             LJMP INPUT_HOUR_MINUTE
06AA                 894             N6:
06AA F8              895             MOV R0,A
06AB C3              896             CLR C
06AC 9436            897             SUBB A, #36H                    ;i.e., IF ENTERED NUMBER IS GREATER THAN 5(EXAMPLE 
                             IS 60 MINUTES)
06AE 50DE            898             JNC ERROR
06B0 E8              899             MOV A, R0
06B1 C3              900             CLR C 
06B2 9430            901             SUBB A, #30H                    ;AGAIN SAME PROCEDURES AS DONE WITH HOURS
06B4 C4              902             SWAP A
06B5 F8              903             MOV R0, A 
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    17

06B6 51FD            904             ACALL KEYPD
06B8 51B4            905             ACALL DISP
06BA B42302          906             CJNE A, #23H, N7                ;COMPARING THE VALUE OF KEY WITH #
06BD 80CF            907             SJMP ERROR
06BF                 908             N7:
06BF B42A03          909             CJNE A, #2AH, N8                ;COMPARING THE VALUE OF KEY WITH *
06C2 020629          910             LJMP INPUT_HOUR_MINUTE
06C5                 911             N8:
06C5 C3              912             CLR C 
06C6 9430            913             SUBB A, #30H
06C8 28              914             ADD A, R0
06C9 F8              915             MOV R0,A
06CA 740C            916             MOV A, #0CH                     ;TURNING OFF THE CURSOR
06CC 3149            917             ACALL CMD
06CE                 918             LOOP2:
06CE 51FD            919                     ACALL KEYPD
06D0 B42A02          920                     CJNE A, #2AH, N9
06D3 C129            921                     JMP INPUT_HOUR_MINUTE
06D5                 922                     N9:
06D5 B423F6          923                     CJNE A, #23H, LOOP2
06D8 8851            924             MOV MIN, R0
06DA 22              925             RET
                     926     
                     927     
                     928     ;******************************************************************************************
                             *******
                     929     ;This module outputs the 2-digit BCD number on the LCD
                     930     ;Parameters:number to be displayed in 40H
                     931     ;Return:None
                     932     ;DEPENDANCIES:UNPACK, DISP
                     933     ;******************************************************************************************
                             *******
                     934     
06DB                 935     DISP_2DIG_NO:
06DB 1208C2          936             LCALL UNPACK
06DE EB              937             MOV A, R3
06DF 51B4            938             ACALL DISP
06E1 EA              939             MOV A, R2
06E2 51B4            940             ACALL DISP
06E4 22              941             RET
                     942     ;******************************************************************************************
                             *******
                     943     ;This module will display the VALUES PRESENT IN HOURS AND MIN VARIABLE on LCD in format HH:
                             mm DAY
                     944     ;Parameters:HOURS, MIN
                     945     ;Return:None
                     946     ;DEPENDANCIES:DISP_DAY, DISP, UNPACK
                     947     ;******************************************************************************************
                             *******
06E5                 948     DISP_TIME:
06E5 855240          949             MOV 40h, HOURS
06E8 D1DB            950             ACALL DISP_2DIG_NO
06EA 743A            951             MOV A, #':'
06EC 51B4            952             ACALL DISP
06EE 855140          953             MOV 40h, MIN
06F1 D1DB            954             ACALL DISP_2DIG_NO
06F3 22              955             RET
                     956     ;******************************************************************************************
                             *******
                     957     ;This module is used to write data to EEPROM. User has to pass the starting address of the 
                             data 
                     958     ;through the R0 register, location on the EEPROM through the DPTR and the count of the data
                              through
                     959     ;COUNT9. Rest everything is handled by this module
                     960     ;Parameters: DPTR, R1, COUNT9
                     961     ;DEPENDANCIES:EEPROM_START, EEPROM_DELAY, SEND_DATA, EEPROM_STOP
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    18

                     962     ;******************************************************************************************
                             *******
06F4                 963     WRITE_DATA:   
06F4 F158            964             CALL EEPROM_START
06F6 74A0            965             MOV A,#0A0H          
06F8 F196            966             CALL SEND_DATA
06FA E582            967             MOV A,DPL                       ;LOCATION ADDRESS
06FC F196            968             CALL SEND_DATA
06FE E583            969             MOV A,DPH                       ;LOCATION ADDRESS
0700 F196            970             CALL SEND_DATA
0702 8664            971             MOV EEPROM_DATA,@R0
0704 E564            972             MOV A,EEPROM_DATA       ;DATA TO BE SEND
0706 F196            973             CALL SEND_DATA
0708 F177            974             CALL EEPROM_STOP
070A 120810          975             LCALL EEPROM_DELAY
070D 120810          976             LCALL EEPROM_DELAY
0710 F158            977             CALL EEPROM_START
0712 74A0            978             MOV A,#0A0H          
0714 F196            979             CALL SEND_DATA
0716 E582            980             MOV A,DPL                        ;LOCATION ADDRESS
0718 F196            981             CALL SEND_DATA
071A E583            982             MOV A,DPH                        ;LOCATION ADDRESS
071C F196            983             CALL SEND_DATA
071E 8664            984             MOV EEPROM_DATA,@R0
0720 E564            985             MOV A,EEPROM_DATA        ;DATA TO BE SEND
0722 F196            986             CALL SEND_DATA
0724 F177            987             CALL EEPROM_STOP
0726 120810          988             LCALL   EEPROM_DELAY
0729 120810          989             LCALL   EEPROM_DELAY
072C A3              990             INC DPTR
072D 08              991             INC R0
072E D566C3          992             DJNZ COUNT9,WRITE_DATA 
0731 22              993             RET   
                     994     
                     995     ;******************************************************************************************
                             *******
                     996     ;This module is used to read the data from EEPROM. Location on the EEPROM is passed through
                              the 
                     997     ;DPTR and data is returned to the RAM in the location determined by the R1 and number of by
                             tes read 
                     998     ;is determined by the COUNT9
                     999     ;Parameters:COUNT9, DPTR, R1
                    1000     ;Return:data on RAM location pointed by R1
                    1001     ;DEPENDANCIES:EEPROM_START, EEPROM_DELAY,SEND_DATA, EEPROM_STOP
                    1002     ;******************************************************************************************
                             *******
0732                1003     READ_DATA:     
0732 F158           1004             CALL EEPROM_START
0734 74A0           1005             MOV A,#0A0H
0736 F196           1006             CALL SEND_DATA
0738 E582           1007             MOV A,DPL                        ;LOCATION ADDRESS
073A F196           1008             CALL SEND_DATA
073C E583           1009             MOV A,DPH                        ;LOCATION ADDRESS
073E F196           1010             CALL SEND_DATA
0740 F158           1011             CALL EEPROM_START
0742 74A1           1012             MOV A,#0A1H
0744 F196           1013             CALL SEND_DATA
0746 F1B8           1014             CALL GET_DATA
0748 F177           1015             CALL EEPROM_STOP
074A 120810         1016             LCALL   EEPROM_DELAY
074D 120810         1017             LCALL   EEPROM_DELAY
0750 A3             1018             INC DPTR
0751 A73C           1019             MOV @R1,3CH                              ; STORE
0753 09             1020             INC R1                          
0754 D566DB         1021             DJNZ COUNT9,READ_DATA
0757 22             1022             RET
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    19

                    1023     
                    1024     ;******************************************************************************************
                             *******
                    1025     ;This module is used to initialize the eeprom line
                    1026     ;start bit is high to low transition on the sda while the scl is high
                    1027     ;hence the flow of the module is 
                    1028     ;high sda -- high scl -- hold the scl high -- make sda low -- hold scl high --  make scl lo
                             w
                    1029     ;Parameters:None
                    1030     ;Return:None
                    1031     ;DEPENDANCIES:None
                    1032     ;******************************************************************************************
                             *******
                    1033     
0758                1034     EEPROM_START:  
0758 D2A1           1035             SETB SDA
075A 00             1036             NOP
075B 00             1037             NOP
075C 00             1038             NOP
075D 00             1039             NOP
075E 00             1040             NOP
075F 00             1041             NOP
0760 00             1042             NOP
0761 D2A0           1043             SETB SCL
0763 00             1044             NOP
0764 00             1045             NOP
0765 00             1046             NOP
0766 00             1047             NOP
0767 00             1048             NOP
0768 00             1049             NOP
0769 00             1050             NOP
076A 00             1051             NOP
076B C2A1           1052             CLR SDA
076D 00             1053             NOP
076E 00             1054             NOP
076F 00             1055             NOP
0770 00             1056             NOP
0771 00             1057             NOP
0772 00             1058             NOP
0773 00             1059             NOP
0774 C2A0           1060             CLR SCL
0776 22             1061             RET
                    1062     
                    1063     ;******************************************************************************************
                             *******
                    1064     ;This module is used to mark stop of EEPROM data flow
                    1065     ;stop bit is low to high transition on SDA while SCL is maintained high
                    1066     ;Parameters:None
                    1067     ;Return:None
                    1068     ;DEPENDANCIES:None
                    1069     ;******************************************************************************************
                             *******
0777                1070     EEPROM_STOP:    
0777 C2A1           1071             CLR SDA
0779 00             1072             NOP
077A 00             1073             NOP
077B 00             1074             NOP
077C 00             1075             NOP
077D 00             1076             NOP
077E 00             1077             NOP
077F 00             1078             NOP
0780 D2A0           1079             SETB SCL
0782 00             1080             NOP
0783 00             1081             NOP
0784 00             1082             NOP
0785 00             1083             NOP
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    20

0786 00             1084             NOP
0787 00             1085             NOP
0788 00             1086             NOP
0789 00             1087             NOP
078A D2A1           1088             SETB SDA
078C 00             1089             NOP
078D 00             1090             NOP
078E 00             1091             NOP
078F 00             1092             NOP
0790 00             1093             NOP
0791 00             1094             NOP
0792 00             1095             NOP
0793 C2A0           1096             CLR SCL
0795 22             1097             RET
                    1098             ;=========================================================
                    1099     
                    1100     ;******************************************************************************************
                             *******
                    1101     ;This module sends the data to the EEPROM through Acc.
                    1102     ;this module rotates left the data through carry and puts the carry to the SDA pin
                    1103     ;Parameters:Acc
                    1104     ;Return:None(writes data onto EEPROM)
                    1105     ;DEPENDANCIES:EEPROM_DELAY, CLOCK
                    1106     ;******************************************************************************************
                             *******
0796                1107     SEND_DATA:     
0796 7F00           1108             MOV R7,#00H
0798                1109             SEND:      
0798 33             1110                     RLC A
0799 92A1           1111                     MOV SDA,C
079B 120803         1112                     CALL CLOCK
079E 0F             1113                     INC R7
079F BF08F6         1114                     CJNE R7,#08,SEND
07A2 D2A1           1115             SETB  SDA
07A4 00             1116             NOP
07A5 00             1117             NOP     
07A6 00             1118             NOP
07A7 00             1119             NOP
07A8 00             1120             NOP     
07A9 00             1121             NOP
07AA D2A0           1122             SETB SCL
07AC 20A1FD         1123             JB SDA,$
07AF 120810         1124             CALL EEPROM_DELAY
07B2 C2A0           1125             CLR SCL
07B4 120810         1126             CALL EEPROM_DELAY
07B7 22             1127             RET
                    1128     
                    1129     ;******************************************************************************************
                             *******
                    1130     ;This module reads the data from the EEPROM into the RAM location 3CH
                    1131     ;Parameters: None
                    1132     ;Return: data in 3CH
                    1133     ;DEPENDANCIES:CLOCK
                    1134     ;******************************************************************************************
                             *******
07B8                1135     GET_DATA:
07B8 D2A1           1136             SETB SDA   
07BA 7F00           1137             MOV R7,#00H
07BC E4             1138             CLR A
07BD                1139             GET:    
07BD D2A0           1140                     SETB SCL
07BF 00             1141                     NOP
07C0 00             1142                     NOP     
07C1 A2A1           1143                     MOV C,SDA
07C3 33             1144                     RLC A
07C4 C2A0           1145                     CLR SCL
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    21

07C6 0F             1146                     INC R7
07C7 BF08F3         1147                     CJNE R7,#08,GET
07CA D2A1           1148             SETB SDA
07CC 120803         1149             CALL CLOCK
07CF F53C           1150             MOV 3CH,A
07D1 22             1151             RET
                    1152     ;******************************************************************************************
                             *******
                    1153     ;This module reads all the Parameters of the RTC by calling other functions
                    1154     ;Parameters:None
                    1155     ;Return:MIN, HOURS, DAY
                    1156     ;DEPENDANCIES:READ_BYTE, I2C_STOP
                    1157     ;******************************************************************************************
                             *******
07D2                1158     READ_RTC:
07D2 756000         1159             MOV     ADD_LOWL,#00h
07D5 120860         1160             LCALL   READ_BYTE
07D8 856150         1161             MOV     SEC,DAVAVA
07DB 1208D2         1162             LCALL   I2C_STOP                                                   
07DE 756001         1163             MOV     ADD_LOWL,#01h
07E1 120860         1164             LCALL   READ_BYTE
07E4 856151         1165             MOV     MIN,DAVAVA
07E7 1208D2         1166             LCALL   I2C_STOP
07EA 756002         1167             MOV     ADD_LOWL,#02h
07ED 120860         1168             LCALL   READ_BYTE
07F0 856152         1169             MOV     HOURS,DAVAVA
07F3 1208D2         1170             LCALL   I2C_STOP
07F6 756003         1171             MOV     ADD_LOWL,#03h
07F9 120860         1172             LCALL   READ_BYTE
07FC 856167         1173             MOV     DAY,DAVAVA
07FF 1208D2         1174             LCALL   I2C_STOP
0802 22             1175         RET
                    1176     
                    1177     ;******************************************************************************************
                             *******
                    1178     ;This module generates clock for EEPROM communication
                    1179     ;Parameters:None
                    1180     ;Return:None
                    1181     ;DEPENDANCIES:None
                    1182     ;******************************************************************************************
                             *******
0803                1183     CLOCK:         
0803 D2A0           1184             SETB SCL
0805 00             1185             NOP
0806 00             1186             NOP
0807 00             1187             NOP
0808 00             1188             NOP
0809 00             1189             NOP
080A 00             1190             NOP
080B 00             1191             NOP
080C 00             1192             NOP
080D C2A0           1193             CLR SCL
080F 22             1194             RET
                    1195     
                    1196     ;******************************************************************************************
                             *******
                    1197     ;This module generates a delay of 3ms
                    1198     ;Parameters:None
                    1199     ;Return:None
                    1200     ;DEPENDANCIES:None
                    1201     ;******************************************************************************************
                             *******
0810                1202     EEPROM_DELAY:      
0810 75330B         1203             MOV 33H,#11      ;DELAY OF 3 MSEC 
0813                1204             EEPROM_DELAY_1:
0813 7532FF         1205                     MOV 32H,#0FFH
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    22

0816 D532FD         1206                     DJNZ 32H,$
0819 D533F7         1207                     DJNZ 33H,EEPROM_DELAY_1
081C 22             1208                     RET
                    1209     
                    1210     ;******************************************************************************************
                             *******
                    1211     ;This module reads the stored PIN from EEPROM and loads it to RAM location 54H
                    1212     ;Parameters:None
                    1213     ;Return:PIN on RAM location 0x54
                    1214     ;DEPENDANCIES:READ_DATA
                    1215     ;******************************************************************************************
                             *******
081D                1216     READ_PASSWORD:
081D 7954           1217             MOV R1, #54H
081F 907001         1218             MOV DPTR, #7001H
0822 756604         1219             MOV COUNT9, #4H
0825 120732         1220             LCALL READ_DATA
0828 22             1221             RET
                    1222     
                    1223     ;******************************************************************************************
                             *******
                    1224     ;This module writes the values to RTC
                    1225     ;Parameters: data to be loaded in DAVAVA, address of register in ADD_LOWL
                    1226     ;Return:None
                    1227     ;DEPENDANCIES:LOOP_BYTE
                    1228     ;******************************************************************************************
                             *******
0829                1229     WRITE_BYTE:            
0829 C2A1           1230             CLR     SDA                   ;start bit
082B C2A0           1231             CLR     SCL
082D 74D0           1232             MOV     A,#CONT_BYTE_W        ;send control byte
082F 1208A0         1233             LCALL   LOOP_BYTE
0832 D2A1           1234             SETB    SDA
0834 D2A0           1235             SETB    SCL
0836 B2B0           1236             CPL             0B0H
0838 20A1EE         1237             JB      SDA,WRITE_BYTE        ;loop until busy
083B C2A0           1238             CLR     SCL
083D E560           1239             MOV     A,ADD_LOWL             ;send address low
083F 1208A0         1240             LCALL   LOOP_BYTE
0842 D2A1           1241             SETB    SDA
0844 D2A0           1242             SETB    SCL
0846 20A1E0         1243             JB      SDA,WRITE_BYTE        ;loop until busy
0849 C2A0           1244             CLR     SCL
084B E561           1245             MOV     A,DAVAVA                ;send DAVAVA
084D 1208A0         1246             LCALL   LOOP_BYTE
0850 D2A1           1247             SETB    SDA
0852 D2A0           1248             SETB    SCL
0854 20A1D2         1249             JB      SDA,WRITE_BYTE        ;loop until busy
0857 C2A1           1250             CLR     SDA
0859 C2A0           1251             CLR     SCL
085B D2A0           1252             SETB    SCL                   ;stop bit
085D D2A1           1253             SETB    SDA
085F 22             1254             RET
                    1255     
                    1256     
                    1257     
                    1258     
                    1259     
                    1260     ;******************************************************************************************
                             *******
                    1261     ;This module will read a single Parameter from the RTC.
                    1262     ;Parameters: ADD_LOWL must contain the address of required register
                    1263     ;OUTPUT:DAVAVA will contain the data
                    1264     ;DEPENDANCIES:LOOP_BYTE, LOOP_READ
                    1265     ;******************************************************************************************
                             *******
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    23

0860                1266     READ_BYTE:             
0860 C2A1           1267             CLR     SDA                   ;start bit
0862 C2A0           1268             CLR     SCL
0864 74D0           1269             MOV     A,#CONT_BYTE_W        ;send control byte
0866 11A0           1270             ACALL   LOOP_BYTE
0868 D2A1           1271             SETB    SDA
086A D2A0           1272             SETB    SCL
086C 20A1F1         1273             JB      SDA,READ_BYTE         ;loop until busy
086F C2A0           1274             CLR     SCL
0871 E560           1275             MOV     A,ADD_LOWL             ;send address low
0873 11A0           1276             ACALL   LOOP_BYTE
0875 D2A1           1277             SETB    SDA
0877 D2A0           1278             SETB    SCL
0879 20A1E4         1279             JB      SDA,READ_BYTE         ;loop until busy
087C C2A0           1280             CLR     SCL
                    1281     
087E D2A0           1282             SETB    SCL
0880 D2A1           1283             SETB    SDA
0882 C2A1           1284             CLR     SDA                   ;start bit
0884 C2A0           1285             CLR     SCL
0886 74D1           1286             MOV     A,#CONT_BYTE_R        ;send control byte
0888 11A0           1287             ACALL   LOOP_BYTE
088A D2A1           1288             SETB    SDA
088C D2A0           1289             SETB    SCL
088E 20A1CF         1290             JB      SDA,READ_BYTE         ;loop until busy
0891 C2A0           1291             CLR     SCL
0893 11B0           1292             ACALL   LOOP_READ
0895 D2A1           1293             SETB    SDA
0897 D2A0           1294             SETB    SCL
0899 C2A0           1295             CLR     SCL
                    1296     
089B D2A0           1297             SETB    SCL                   ;stop bit
089D D2A1           1298             SETB    SDA
089F 22             1299             RET
                    1300     
                    1301     
                    1302     ;******************************************************************************************
                             *******
                    1303     ;This module writes the content of DAVAVA to the RTC one bit at a time
                    1304     ;Parameters:DAVAVA
                    1305     ;Return:None but RTC will br set
                    1306     ;DEPENDANCIES:None
                    1307     ;******************************************************************************************
                             *******
08A0                1308     LOOP_BYTE:             
08A0 C002           1309             PUSH    02H
08A2 7A08           1310             MOV     R2,#08H
08A4                1311             LOOP_SEND:            
08A4 33             1312                     RLC     A
08A5 92A1           1313                     MOV     SDA,C
08A7 D2A0           1314                     SETB    SCL
08A9 C2A0           1315                     CLR     SCL
08AB DAF7           1316                     DJNZ    R2,LOOP_SEND
08AD D002           1317             POP     02H
08AF 22             1318             RET
                    1319     ;******************************************************************************************
                             *******
                    1320     ;This module reads the value passed by the RTC via SDA and places it in DAVAVA
                    1321     ;Parameters:None passed but output depends on the value passed through the SDA before calli
                             ng this
                    1322     ;OUTPUT: value on DAVAVA
                    1323     ;DEPENDANCIES:None
                    1324     ;******************************************************************************************
                             *******
                    1325     
08B0                1326     LOOP_READ:             
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    24

08B0 C002           1327             PUSH   02H
08B2 7A08           1328         MOV    R2,#08H
08B4                1329             LOOP_READ1:            
08B4 D2A0           1330                     SETB   SCL
08B6 A2A1           1331                     MOV    C,SDA
08B8 C2A0           1332                     CLR    SCL
08BA 33             1333                     RLC    A
08BB DAF7           1334                     DJNZ   R2,LOOP_READ1
08BD F561           1335             MOV    DAVAVA,A
08BF D002           1336             POP    02H
08C1 22             1337             RET
                    1338     
                    1339     ;******************************************************************************************
                             *******
                    1340     ;This module will prepare the BCD data to display on the LCD
                    1341     ;Parameters:40h
                    1342     ;Return:msb in R3 and lsb in R2
                    1343     ;DEPENDANCIES:None
                    1344     ;******************************************************************************************
                             *******
08C2                1345     UNPACK:
08C2 E540           1346             MOV A,40h
08C4 540F           1347             ANL     A,#0FH
08C6 2430           1348             ADD     A,#30h
08C8 FA             1349             MOV     R2,A
08C9 E540           1350             MOV A,40h       
08CB C4             1351             SWAP    A
08CC 540F           1352             ANL     A,#0FH
08CE 2430           1353             ADD     A,#30H
08D0 FB             1354             MOV     R3,A
08D1 22             1355             RET
                    1356     
                    1357     
                    1358     
08D2                1359     I2C_Stop:
08D2 C2A1           1360             CLR       SDA
08D4 D2A0           1361             SETB      SCL
08D6 00             1362             NOP
08D7 D2A1           1363             SETB      SDA
08D9 22             1364             RET
                    1365     
                    1366     
                    1367     
                    1368     
                    1369     
                    1370     
                    1371     ;******************************************************************************************
                             *******
                    1372     ;This module will convert 8-bit hexadecimal number to corresponding BCD equivalent MSB of 3
                             -dig
                    1373     ;BCD will be placed in R2 and other two will be in 40H.
                    1374     ;Parameters:hex number in Acc
                    1375     ;Return:msb in r2 and 2-dig lsb IN 40H(and Acc)
                    1376     ;DEPENDANCIES:None
                    1377     ;******************************************************************************************
                             *******
08DA                1378     HEX_BCD:
08DA 75F064         1379             MOV B,#100
08DD 84             1380             DIV AB
08DE FA             1381             MOV R2, A
08DF E5F0           1382             MOV A, B
08E1 75F00A         1383             MOV B, #10
08E4 84             1384             DIV AB
08E5 C4             1385             SWAP A
08E6 25F0           1386             ADD A, B
08E8 F540           1387             MOV 40H, A
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    25

08EA 22             1388             RET
                    1389     ;******************************************************************************************
                             *******
                    1390     ;This module is used to convert from BCD to HEX. 
                    1391     ;Parameters:data to be converted in the Acc
                    1392     ;Return: converted data in Acc
                    1393     ;DEPENDANCIES:None
                    1394     ;******************************************************************************************
                             *******
08EB                1395     BCD_HEX:
08EB C0E0           1396             PUSH ACC
08ED 540F           1397             ANL A, #0FH
08EF FA             1398             MOV R2, A
08F0 D0E0           1399             POP ACC
08F2 54F0           1400             ANL A, #0F0H
08F4 C4             1401             SWAP A
08F5 75F00A         1402             MOV B, #0AH 
08F8 A4             1403             MUL AB
08F9 2A             1404             ADD A, R2
08FA 22             1405             RET
                    1406     
08FB                1407     CREATE_DATA:
                    1408     
08FB 756603         1409             MOV COUNT9, #03H
                    1410             ;MOV DPTR,#TEMP 
08FE 7858           1411             MOV R0,#58H
0900                1412             UP2:
0900 E4             1413             CLR A
0901 93             1414             MOVC A, @A+DPTR
0902 F6             1415             MOV @R0, A
0903 08             1416             INC R0
0904 A3             1417             INC DPTR
0905 D566F8         1418             DJNZ COUNT9, UP2
0908 900503         1419             MOV DPTR, #0503H
090B 7858           1420             MOV R0, #58H
090D 756603         1421             MOV COUNT9, #03H
0910 1206F4         1422             LCALL WRITE_DATA
0913 7954           1423             MOV R1, #54H
0915 756603         1424             MOV COUNT9, #03H
0918 900503         1425             MOV DPTR, #0503H
091B 120732         1426             LCALL READ_DATA
091E 855440         1427             MOV 40H, 54H
0921 1206DB         1428             LCALL DISP_2DIG_NO
0924 22             1429             RET
                    1430     
                    1431     
                    1432     END
                             
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    26

SYMBOL TABLE LISTING
------ ----- -------


N A M E               T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . . .  D ADDR   00E0H   A   
ADD_LOWL . . . . . .  N NUMB   0060H   A   
AUTH_FAIL. . . . . .  C ADDR   038DH   A   
AUTH_FAIL_MSG. . . .  C ADDR   01EEH   A   
AUTH_MSG . . . . . .  C ADDR   01CFH   A   
B. . . . . . . . . .  D ADDR   00F0H   A   
BCD_HEX. . . . . . .  C ADDR   08EBH   A   
BEGIN. . . . . . . .  C ADDR   0100H   A   
BELL_ACK . . . . . .  C ADDR   027CH   A   
BELL_KEY . . . . . .  B ADDR   00B0H.4 A   
BELL_MESSAGE . . . .  C ADDR   020BH   A   
BELL_NUMBER_MSG. . .  C ADDR   0228H   A   
BELL_OPTIONS . . . .  C ADDR   021AH   A   
CHECKING_BELL. . . .  C ADDR   02EAH   A   
CHECKING_EMERGENCY .  C ADDR   02EDH   A   
CHECK_KEY. . . . . .  C ADDR   02E7H   A   
CHECK_NEXT_OPTION_1.  C ADDR   0548H   A   
CHECK_NEXT_OPTION_2.  C ADDR   054DH   A   
CLOCK. . . . . . . .  C ADDR   0803H   A   
CMD. . . . . . . . .  C ADDR   0149H   A   
CONFIRM. . . . . . .  C ADDR   026BH   A   
CONTINUE_1 . . . . .  C ADDR   0439H   A   
CONTINUE_2 . . . . .  C ADDR   043EH   A   
CONTINUE_3 . . . . .  C ADDR   045AH   A   
CONTINUE_4 . . . . .  C ADDR   045FH   A   
CONT_BYTE_R. . . . .  N NUMB   00D1H   A   
CONT_BYTE_W. . . . .  N NUMB   00D0H   A   
CORRECT_ENTRY. . . .  C ADDR   0554H   A   
COUNT7 . . . . . . .  N NUMB   006BH   A   
COUNT8 . . . . . . .  N NUMB   0068H   A   
COUNT9 . . . . . . .  N NUMB   0066H   A   
CREATE_DATA. . . . .  C ADDR   08FBH   A   
DAVAVA . . . . . . .  N NUMB   0061H   A   
DAY. . . . . . . . .  N NUMB   0067H   A   
DAYS . . . . . . . .  N NUMB   0069H   A   
DELAY_1SEC . . . . .  C ADDR   02C1H   A   
DELAY_500MSEC. . . .  C ADDR   02CEH   A   
DISP . . . . . . . .  C ADDR   02B4H   A   
DISPCH2. . . . . . .  C ADDR   028AH   A   
DISP_2DIG_NO . . . .  C ADDR   06DBH   A   
DISP_DAY . . . . . .  C ADDR   029AH   A   
DISP_MSG . . . . . .  C ADDR   013AH   A   
DISP_TIME. . . . . .  C ADDR   06E5H   A   
DONE_ENTERING_SERIAL  C ADDR   0469H   A   
DPH. . . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . . .  D ADDR   0082H   A   
DURATION . . . . . .  N NUMB   006AH   A   
DURATION_MSG . . . .  C ADDR   0263H   A   
EDIT_BELL. . . . . .  C ADDR   03CDH   A   
EDIT_DURATION. . . .  C ADDR   0252H   A   
EEPROM_DATA. . . . .  N NUMB   0064H   A   
EEPROM_DELAY . . . .  C ADDR   0810H   A   
EEPROM_DELAY_1 . . .  C ADDR   0813H   A   
EEPROM_START . . . .  C ADDR   0758H   A   
EEPROM_STOP. . . . .  C ADDR   0777H   A   
EMERGENCY. . . . . .  C ADDR   039DH   A   
EMERGENCY_MSG. . . .  C ADDR   01FEH   A   
EMMERGENCY . . . . .  C ADDR   02F9H   A   
EMRG_KEY . . . . . .  B ADDR   00B0H.5 A   
END_CHECK_KEY. . . .  C ADDR   02F0H   A   
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    27

ERROR. . . . . . . .  C ADDR   068EH   A   
ERROR_DAY. . . . . .  C ADDR   0618H   A   
ERROR_EDIT_BELL. . .  C ADDR   04ECH   A   
ERROR_ENTRY. . . . .  C ADDR   056DH   A   
ERROR_MSG. . . . . .  C ADDR   0197H   A   
FIRST. . . . . . . .  C ADDR   013FH   A   
FLAG . . . . . . . .  N NUMB   0064H   A   
GET. . . . . . . . .  C ADDR   07BDH   A   
GET_DATA . . . . . .  C ADDR   07B8H   A   
HAS_BELL_ENTRY . . .  C ADDR   03EFH   A   
HERE31 . . . . . . .  C ADDR   02C5H   A   
HERE311. . . . . . .  C ADDR   02D8H   A   
HERE4. . . . . . . .  C ADDR   02C3H   A   
HERE41 . . . . . . .  C ADDR   02D6H   A   
HEX_BCD. . . . . . .  C ADDR   08DAH   A   
HOURS. . . . . . . .  N NUMB   0052H   A   
HOURS1 . . . . . . .  N NUMB   0059H   A   
HOURS2 . . . . . . .  N NUMB   0062H   A   
I2C_STOP . . . . . .  C ADDR   08D2H   A   
INPUT_DAY. . . . . .  C ADDR   05C5H   A   
INPUT_DURATION . . .  C ADDR   0528H   A   
INPUT_HOUR_MINUTE. .  C ADDR   0629H   A   
INTI . . . . . . . .  C ADDR   0121H   A   
ITS_BELL . . . . . .  C ADDR   0639H   A   
KEY. . . . . . . . .  C ADDR   033DH   A   
KEYCODE. . . . . . .  C ADDR   01C3H   A   
KEYPD. . . . . . . .  C ADDR   02FDH   A   
LOOP . . . . . . . .  C ADDR   011DH   A   
LOOP1. . . . . . . .  C ADDR   064DH   A   
LOOP2. . . . . . . .  C ADDR   06CEH   A   
LOOP3. . . . . . . .  C ADDR   0607H   A   
LOOP4. . . . . . . .  C ADDR   0371H   A   
LOOP5. . . . . . . .  C ADDR   035FH   A   
LOOP6. . . . . . . .  C ADDR   05DAH   A   
LOOP7. . . . . . . .  C ADDR   05B0H   A   
LOOP8. . . . . . . .  C ADDR   03BDH   A   
LOOP9. . . . . . . .  C ADDR   042BH   A   
LOOP_BYTE. . . . . .  C ADDR   08A0H   A   
LOOP_READ. . . . . .  C ADDR   08B0H   A   
LOOP_READ1 . . . . .  C ADDR   08B4H   A   
LOOP_SEND. . . . . .  C ADDR   08A4H   A   
MEMORY_ADDRESS1. . .  N NUMB   0062H   A   
MEMORY_ADDRESS2. . .  N NUMB   0063H   A   
MEM_VAL. . . . . . .  N NUMB   0000H   A   
MESSAGE1 . . . . . .  C ADDR   0174H   A   
MESSAGE2 . . . . . .  C ADDR   017FH   A   
MESSAGE3 . . . . . .  C ADDR   018AH   A   
MESSAGE5 . . . . . .  C ADDR   01DFH   A   
MIN. . . . . . . . .  N NUMB   0051H   A   
MIN1 . . . . . . . .  N NUMB   0058H   A   
MINS2. . . . . . . .  N NUMB   0063H   A   
N1 . . . . . . . . .  C ADDR   065CH   A   
N10. . . . . . . . .  C ADDR   05E7H   A   
N102 . . . . . . . .  C ADDR   037DH   A   
N103 . . . . . . . .  C ADDR   037AH   A   
N11. . . . . . . . .  C ADDR   05ECH   A   
N12. . . . . . . . .  C ADDR   05F1H   A   
N13. . . . . . . . .  C ADDR   060EH   A   
N14. . . . . . . . .  C ADDR   03C7H   A   
N15. . . . . . . . .  C ADDR   049AH   A   
N16. . . . . . . . .  C ADDR   0565H   A   
N17. . . . . . . . .  C ADDR   04D1H   A   
N2 . . . . . . . . .  C ADDR   0662H   A   
N3 . . . . . . . . .  C ADDR   0677H   A   
N4 . . . . . . . . .  C ADDR   067CH   A   
N5 . . . . . . . . .  C ADDR   06A4H   A   
A51 MACRO ASSEMBLER  SET_BELL_1                                                           06/28/2017 13:08:16 PAGE    28

N6 . . . . . . . . .  C ADDR   06AAH   A   
N7 . . . . . . . . .  C ADDR   06BFH   A   
N8 . . . . . . . . .  C ADDR   06C5H   A   
N9 . . . . . . . . .  C ADDR   06D5H   A   
NEW_BELL . . . . . .  C ADDR   04EBH   A   
NEW_BELL_MSG . . . .  C ADDR   0243H   A   
NEXT . . . . . . . .  C ADDR   063CH   A   
NEXT_ENTRY . . . . .  C ADDR   0448H   A   
NO_BELL. . . . . . .  C ADDR   0234H   A   
P2 . . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . . .  D ADDR   00B0H   A   
PASSWORD . . . . . .  C ADDR   01BEH   A   
READY. . . . . . . .  C ADDR   0156H   A   
READ_BYTE. . . . . .  C ADDR   0860H   A   
READ_DATA. . . . . .  C ADDR   0732H   A   
READ_MINUTES . . . .  C ADDR   069BH   A   
READ_PASSWORD. . . .  C ADDR   081DH   A   
READ_RTC . . . . . .  C ADDR   07D2H   A   
REDO . . . . . . . .  C ADDR   0337H   A   
REPEAT1. . . . . . .  C ADDR   02C7H   A   
REPEAT11 . . . . . .  C ADDR   02DAH   A   
ROW. . . . . . . . .  C ADDR   0332H   A   
SAVE_BELL. . . . . .  C ADDR   04FBH   A   
SCL. . . . . . . . .  N NUMB   00A0H   A   
SDA. . . . . . . . .  N NUMB   00A1H   A   
SEC. . . . . . . . .  N NUMB   0050H   A   
SECOND . . . . . . .  C ADDR   0144H   A   
SECONDS. . . . . . .  C ADDR   0278H   A   
SEND . . . . . . . .  C ADDR   0798H   A   
SEND_DATA. . . . . .  C ADDR   0796H   A   
SERIAL . . . . . . .  N NUMB   007CH   A   
SETT_BELL. . . . . .  C ADDR   02F5H   A   
SETT_TIME. . . . . .  C ADDR   02F1H   A   
SET_BELL . . . . . .  C ADDR   03A9H   A   
SET_BELL_VERIFIED. .  C ADDR   03A9H   A   
SET_FLAG . . . . . .  C ADDR   0398H   A   
SET_TIME . . . . . .  C ADDR   057AH   A   
SKIP . . . . . . . .  C ADDR   0295H   A   
SKIP1. . . . . . . .  C ADDR   02AFH   A   
TEMP_DAY . . . . . .  N NUMB   0053H   A   
TIME_KEY . . . . . .  B ADDR   00B0H.3 A   
UNPACK . . . . . . .  C ADDR   08C2H   A   
UP11 . . . . . . . .  C ADDR   028FH   A   
UP12 . . . . . . . .  C ADDR   02A0H   A   
UP13 . . . . . . . .  C ADDR   02A7H   A   
UP2. . . . . . . . .  C ADDR   0900H   A   
VER_PASSWORD . . . .  C ADDR   0350H   A   
WAIT . . . . . . . .  C ADDR   015FH   A   
WAIT_FOR_ENTER . . .  C ADDR   0493H   A   
WAIT_FOR_ENTER_KEY .  C ADDR   055CH   A   
WAIT_FOR_ENTER_KEY_1  C ADDR   04CAH   A   
WEEKDAY. . . . . . .  C ADDR   01A6H   A   
WELCOME. . . . . . .  C ADDR   0167H   A   
WRITE_BYTE . . . . .  C ADDR   0829H   A   
WRITE_DATA . . . . .  C ADDR   06F4H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
