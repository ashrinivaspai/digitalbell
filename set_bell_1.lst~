set_bell_1                                                                                                              PAGE 1
                         1     ;**********************************************************************************************
                         2     ;The following set of code is assembly level code for digital bell system
                         3     ;Author: Sukesh Rao, Srinivas Pai, Sudesh Pai, Gayathri, Arpitha and
                         4     ;Version: 0.1
                         5     ;Date:
                         6     ;**********************************************************************************************
                         7
                         8     org 00h
0000 020100              9     LJMP BEGIN
                        10
  00A0                  11             SCL                     EQU     0A0h    ;IN THIS EXAMPLE I USED PORT 2.0
  00A1                  12             SDA                     EQU     0A1h    ;AND PORT 2.1 FOR THE I2C LINES
                        13                                                         ;YOU CAN CHANGE THEM TO WHATEVER ACCEPTABLE
  00B3                  14             TIME_KEY        EQU             P3.3    ;SET_TIME KEY
  00B4                  15             BELL_KEY        EQU             P3.4    ;SET_BELL KEY
  00B5                  16             EMRG_KEY        EQU     P3.5    ;EMERGENCY KEY
                        17
                        18
                        19     ;=====THE READ AND WRITE COMMANDS (0D0H AND 0D1H)
                        20
  00D0                  21             CONT_BYTE_W             EQU     11010000B
  00D1                  22             CONT_BYTE_R             EQU     11010001B
                        23
                        24             ORG    0060H
                        25
  0061                  26             DAVAVA          EQU 61H
  0060                  27             ADD_LOWL        EQU 60H
  0062                  28             MEMORY_ADDRESS1 EQU 62H
  0063                  29             MEMORY_ADDRESS2 EQU 63H
  0064                  30             EEPROM_DATA     EQU 64H
                        31
                        32     ;=====VARIABLES TO STORE THE TIME IN, COULD BE USED ALSO TO STORE DATA TO WRITE ON DS1307
                        33
  0050                  34             SEC                         EQU 50H
  0051                  35             MIN                 EQU 51H
  0052                  36             HOURS                   EQU     52H
  0067                  37             DAY                     EQU     67H
  0053                  38             TEMP_DAY                EQU     53H
                        39             ;COUNT1                 EQU 54H
                        40             ;COUNT2         EQU 55H
                        41             ;COUNT3         EQU 56H
                        42             ;COUNT4         EQU 57H
  0059                  43             HOURS1                  EQU 59H
  0058                  44             MIN1            EQU 58H
  0064                  45             FLAG1            EQU 64H
  006B                  46             COUNT7          EQU 6BH
  0062                  47             HOURS2                  EQU     62H
  0063                  48             MINS2           EQU 63H
  0069                  49             DAYS            EQU 69H
  006A                  50             DURATION         EQU 6AH
  0068                  51             COUNT8          EQU 68H
  0066                  52             COUNT9          EQU 66H
  007C                  53             SERIAL          EQU 7CH
  0000                  54             MEM_VAL                 EQU     00H
  007D                  55             MODE                    EQU 7DH
                        56             ORG    0100H
                        57
                        58     ;**********************************************************************************************
                        59     ;                                                                       CODE BEGINS
                        60     ;**********************************************************************************************
                        61
                        62     BEGIN:
0100 3121               63     ACALL INTI
                        64                                     ;CALL THE INITIALIZATION MODULE
0102 C2A0               65             CLR SCL                         ;SCL: SERIAL CLOCK LINE ->MEANS THE CLOCK INPUT FOR I2C
0104 C2A1               66             CLR     SDA                     ;SDA: SERIAL DATA I/P & O/P ->MEANS THE INPUR AND OUTPUT LINE
0106 C2A2               67         CLR P2.2                    ;
0108 C2B7               68             CLR P3.7                        ;SOME UNECESSARY STATEMENTS
010A 00                 69         NOP                                 ;ANOTHER UNECESSARY STATEMENT
010B D2A0               70         SETB    SCL                 ;       ""            ""
010D D2A1               71         SETB        SDA
010F 00                 72         NOP
0110 7401               73             MOV A, #01H
0112 3149               74             ACALL CMD
0114 900176             75             MOV DPTR, #WELCOME      ;DISPLAY NICE WELCOME MESSAGE
0117 51AD               76         ACALL DISPCH2
0119 51E4               77         ACALL DELAY_1SEC
                        78         LOOP:                               ;BEGINNING OF ACTUAL 'MAIN' LOOP
011B 3167               79         ACALL DETERMINE_MODE
011D 710A               80             ACALL CHECK_KEY         ;CHECK FOR THE PRESS OF THE SET_TIME, SET_BELL, EMERGENCY_KEY
                        81             ;ACALL CHECK_ALARM      ;CHECK WHETHER WE NEED TO RING THE BELL
011F 80FA               82             SJMP LOOP
                        83
                        84     ;**********************************************************************************************
                        85     ;This module initializes the LD
                        86     ;DEPENDANCIES:CMD
                        87     ;**********************************************************************************************
                        88     INTI:
0121 743C               89             MOV A,#3CH                      ;refer manual for the bit meaning
0123 3149               90             ACALL CMD
0125 743C               91             MOV A,#3CH                      ;DONT KNOW WHY SAME COMMAND IS REPEATER FOR 3 TIMES
0127 3149               92             ACALL CMD
0129 743C               93             MOV A,#3CH                      ;MAY BE TO BE SUPER SURE ABOUT EXECUTION OF IT ;)
012B 3149               94             ACALL CMD
012D 740C               95             MOV A,#0CH
012F 3149               96             ACALL  CMD
0131 7406               97             MOV A,#06H
0133 3149               98             ACALL  CMD
0135 7401               99             MOV A,#01
0137 3149              100             ACALL CMD
0139 22                101             RET
                       102
                       103     ;**********************************************************************************************
                       104     ;This module is used to display the message pointed by DPTR on the DPTR on the screen
                       105     ;DEPENDANCIES:DISPCH2, DELAY_1SEC
                       106     ;**********************************************************************************************
                       107     DISP_MSG:
013A 51AD              108         ACALL DISPCH2
013C 51E4              109         ACALL DELAY_1SEC
013E 22                110             RET
                       111
                       112     ;**********************************************************************************************
                       113     ;This module moves the cursor back to first line first position
                       114     ;**********************************************************************************************
                       115     FIRST:
013F 7480              116         MOV A,#80H                  ;look for the these codes in the LCD datasheet
0141 3149              117         ACALL CMD
0143 22                118         RET
                       119     ;SIMILARLY FOR SECOND LINE
                       120     SECOND:
0144 74C0              121             MOV A,#0C0H
0146 3149              122             ACALL CMD
0148 22                123             RET
                       124
                       125     ;***********************************************************************************************
                       126     ;This module gives cmd to LCD. Command to be passed to the LCD should be placed in Acc.
                       127     ;To send a command a high to low signal is sent to the enable pin while the command to be
                       128     ;sent is place on the data line and the register select(RS) pin is held low.
                       129     ;DEPENDANCIES: READY
                       130     ;***********************************************************************************************
                       131     CMD:
0149 3156              132             ACALL READY
014B F580              133             MOV  80H,A
014D C2A5              134             CLR 0A5H                        ; low on RS
014F C2A6              135             CLR 0A6H
0151 D2A7              136             SETB 0A7H                       ; high to low on En line
0153 C2A7              137             CLR 0A7H
0155 22                138             RET
                       139
                       140     ;***********************************************************************************************
                       141     ;This module checks the LCD status whether busy or not and returns from the module only if
                       142     ;the busy bit/pin/line is 0
                       143     ;***********************************************************************************************
                       144     READY:
0156 C2A7              145         CLR 0A7H                    ;read busy FLAG1
0158 7580FF            146             MOV     80H,#0FFH
015B C2A5              147             CLR     0A5H
015D D2A6              148             SETB    0A6H
                       149             WAIT:
015F C2A7              150                     CLR     0A7H
0161 D2A7              151                     SETB    0A7H
0163 2087F9            152                     JB      87H,WAIT
0166 22                153             RET
                       154
                       155     DETERMINE_MODE:
0167 907FFF            156             MOV DPTR, #7FFFH
016A 7954              157             MOV R1, #54H
016C 756603            158             MOV COUNT9, #03H
016F 1207E0            159             LCALL READ_DATA
0172 85547D            160             MOV MODE, 54H
0175 22                161             RET
                       162     ;***********************************************************************************************
                       163     ;                                                                               LOOK-UP TABLES
                       164     ;***********************************************************************************************
0176 2020202057        165     WELCOME:   db '    WELCOME!',0fh
     454C434F4D
     45210F
0183 2020202020        166     MESSAGE1: DB '     HH:MM', 0FH
     48483A4D4D
     0F
018E 2020202020        167     MESSAGE2: DB '     __:__', 0FH
     5F5F3A5F5F
     0F
0199 2020202044        168     MESSAGE3: DB '    DAY[1-7]', 0FH
     41595B312D
     375D0F
01A6 494E56414C        169     ERROR_MSG: DB 'INVALID NUMBER', 0FH
     4944204E55
     4D4245520F
01B5 3030304D4F        170     WEEKDAY: DB '000','MON','TUE','WED', 'THU', 'FRI', 'SAT', 'SUN'
     4E54554557
     4544544855
     4652495341
     5453554E
01CD 313233340F        171     PASSWORD: DB '1234',0FH
01D2 3132333435        172     KEYCODE:DB '1','2','3','4','5','6','7','8','9','*','0','#'
     363738392A
     3023
01DE 2020454E54        173     AUTH_MSG: DB '  ENTER THE PIN',0FH
     4552205448
     452050494E
     0F
01EE 202054494D        174     MESSAGE5: DB '  TIME IS SET!', 0FH
     4520495320
     534554210F
01FD 20494E434F        175     AUTH_FAIL_MSG: DB ' INCORRECT  PIN', 0FH
     5252454354
     202050494E
     0F
020D 202020454D        176     EMERGENCY_MSG: DB '   EMERGENCY', 0FH
     455247454E
     43590F
021A 2053454C45        177     BELL_MESSAGE: DB ' SELECT OPTION',0FH
     4354204F50
     54494F4E0F
0229 31294E4557        178     BELL_OPTIONS: DB '1)NEW  2)EDIT',0FH
     2020322945
     4449540F
0237 20534C2E20        179     BELL_NUMBER_MSG: DB ' SL. NO.[1-',0FH
     4E4F2E5B31
     2D0F
0243 20204E4F20        180     NO_BELL: DB '  NO BELLS SET',0FH
     42454C4C53
     205345540F
                       181     ;TEMP: DB 12H,23H,01H
0252 204E455720        182     NEW_BELL_MSG: DB ' NEW BELL TIME', 0FH
     42454C4C20
     54494D450F
0261 4455524154        183     EDIT_DURATION: DB 'DURATION[IN SEC]', 0FH
     494F4E5B49
     4E20534543
     5D0F
0272 5B312D395D        184     DURATION_MSG: DB '[1-9]: ', 0FH
     3A200F
027A 2020202043        185     CONFIRM: DB '    CONFIRM!',0FH
     4F4E464952
     4D210F
0287 5345430F          186     SECONDS: DB 'SEC', 0FH
028B 202042454C        187     BELL_ACK: DB '  BELL IS SET',0FH
     4C20495320
     5345540F
0299 42454C4C20        188     SERIAL_NO: DB 'BELL NO. IS ', 0FH
     4E4F2E2049
     53200F
02A6 0000000000        189     TEMP: DB 0H, 0H, 0H, 0H, 0H, 0H, 0H
     0000
                       190     ;***********************************************************************************************
                       191     ;                                                                        END of LOOK-UP TABLES
                       192     ;***********************************************************************************************
                       193
                       194
                       195
                       196     ;***********************************************************************************************
                       197     ;This module takes the starting address of the string to be displayed in the DPTR and loops
                       198     ;till it find the string terminator #0FH and also turns the cursor OFF
                       199     ;Parameters:DPTR holds the starting address of the string
                       200     ;Return:
                       201     ;DEPENDANCIES:DISP,CMD
                       202     ;***********************************************************************************************
                       203     DISPCH2:
02AD 00                204             nop
02AE 740C              205             MOV A, #0CH                     ;TURNING OFF THE CURSOR
02B0 3149              206             ACALL CMD
                       207             UP11:
02B2 E4                208                     CLR A
02B3 93                209                     MOVC A,@A+DPTR          ;use lookup table to get ascii character
02B4 B40F01            210                     CJNE A,#0FH,SKIP111 ;loop till 0xfh is encountered
02B7 22                211                     RET
                       212             SKIP111:
02B8 A3                213                     INC DPTR
02B9 51D7              214                     ACALL  DISP
02BB 80F5              215                     SJMP UP11
                       216
                       217     ;***********************************************************************************************
                       218     ;This module is used to display the 3 lettered day in the LCD give the number of
                       219     ;corresponding day in Acc.
                       220     ;Parameters:Acc. holds the day number
                       221     ;Return:None
                       222     ;DEPENDANCIES:DISP
                       223     ;***********************************************************************************************
                       224     DISP_DAY:
02BD C001              225             PUSH 01H
02BF 75F003            226             MOV B, #3H                              ;IN THE LOOK-UP TABLE NAMED 'WEEKDAY' EACH WEEKDAY LE
02C2 A4                227             MUL AB                                  ;HENCE TO GET ACTUAL OFFSET WE HAVE TO MULTIPLY BASE
                       228             UP12:
02C3 F5F0              229                     MOV B,A                         ;just saving the content of Acc.
02C5 7904              230                     MOV R1, #04H            ;counter
02C7 9001B5            231                     MOV DPTR, #WEEKDAY
                       232                     UP13:
02CA E5F0              233                             MOV A,B                 ;you might assume that why to again load to Acc. but
02CC 93                234                             MOVC A,@A+DPTR  ;use lookup table to get ascii character
02CD D903              235                             DJNZ R1,SKIP1
02CF D001              236                             POP 01H
02D1 22                237                             RET
                       238             SKIP1:
02D2 A3                239                     INC DPTR
02D3 51D7              240                     ACALL  DISP
02D5 80F3              241                     SJMP UP13
                       242
                       243     ;************************************************************************************************
                       244     ;This module takes character to be displayed in the Acc. and displys it on LCD(only one char)
                       245     ;Parameters:Acc.
                       246     ;Return:None
                       247     ;DEPENDANCIES: READY
                       248     ;************************************************************************************************
                       249     DISP:
02D7 3156              250             ACALL READY
02D9 F580              251             MOV 80H, A                              ;80h is the address of the pin on 8051 which is conne
02DB D2A5              252             SETB 0A5H                               ; high RS
02DD C2A6              253             CLR     0A6H                            ; A6h is the R/WBAR
02DF D2A7              254             SETB 0A7H                               ; high to low En
02E1 C2A7              255             CLR     0A7H
02E3 22                256             RET
                       257
                       258     ;************************************************************************************************
                       259     ; This module generates delay of 1sec
                       260     ;************************************************************************************************
                       261     DELAY_1SEC:
02E4 7F0A              262             MOV R7,#10
                       263             HERE4:
02E6 7EFF              264                     MOV R6,#0ffh        ;delay routine for firing
                       265                     HERE31:
02E8 7DFF              266                                     MOV     R5,#0ffH
                       267                                     REPEAT1:
02EA DDFE              268                                             DJNZ    R5,REPEAT1
02EC DEFA              269                                         DJNZ    R6,HERE31
02EE DFF6              270                                         DJNZ        R7,HERE4
02F0 22                271                                             RET
                       272
                       273     DELAY_500MSEC:
02F1 C007              274             PUSH 07H        ;these push instruction will ensure that everything will work fine by saving
                       275                                     ;... value of the register used by the function that called it
02F3 C006              276             PUSH 06H
02F5 C004              277             PUSH 04H
02F7 7F05              278             MOV R7,#5
                       279             HERE41:
02F9 7EFF              280                     MOV R6,#0ffh        ;delay routine for firing
                       281                     HERE311:
02FB 7CFF              282                                     MOV     R4,#0ffH
                       283                                     REPEAT11:
02FD DCFE              284                                             DJNZ    R4,REPEAT11
02FF DEFA              285                                         DJNZ    R6,HERE311
0301 DFF6              286                                         DJNZ        R7,HERE41
0303 D004              287                                         POP 04H
0305 D006              288                                         POP 06H
0307 D007              289                                         POP 07H
0309 22                290                                             RET
                       291
                       292     ;*************************************************************************************************
                       293     ;This module is used to recognize the hitting of the key. As the JNB performs the sjmp little
                       294     ;technique is used to avoid the out of range jmp situation.
                       295     ;Parameters:None
                       296     ;Return:None
                       297     ;DEPENDANCIES: SETT_TIME, SETT_BELL, EMMERGENCY
                       298     ;*************************************************************************************************
                       299     CHECK_KEY:
030A 30B307            300             JNB TIME_KEY, SETT_TIME ;PLEASE NOTICE THE DOUBLE 'T'
                       301             ;SJMP SETT_TIME
                       302             CHECKING_BELL:
030D 30B408            303             JNB BELL_KEY, SETT_BELL
                       304             CHECKING_EMERGENCY:
0310 30B509            305             JNB EMRG_KEY, EMMERGENCY
                       306             END_CHECK_KEY:
0313 22                307             RET
                       308
                       309     ;*************************************************************************************************
                       310     ;Following three labels are just used to redirect the control to appropriate locations
                       311     ;these are needed in order to avoid the below listed two reasons
                       312     ;*************************************************************************************************
                       313
                       314     SETT_TIME:
0314 D11E              315             ACALL SET_TIME                  ;WE REQUIRE THIS MANIPULATION BECAUSE
                       316                                                             ;1)JNB INTERNALLY SJMPs AND SET_TIME IS OUT O
                       317                                                             ;2)ITS JMP AND NOT CALL AND IN FUTURE WHILE A
0316 80F5              318             SJMP CHECKING_BELL
                       319     SETT_BELL:
0318 71CD              320             ACALL SET_BELL
                       321
031A 80F4              322             SJMP CHECKING_EMERGENCY
                       323     EMMERGENCY:
031C 71C1              324             ACALL EMERGENCY
031E 80F3              325             SJMP END_CHECK_KEY
                       326
                       327
                       328     ;*************************************************************************************************
                       329     ;This module is used to read the key hit
                       330     ;Parameters:None
                       331     ;Return:Acc
                       332     ;DEPENDANCIES:DELAY_1SEC
                       333     ;*************************************************************************************************
                       334
                       335     KEYPD:
0320 7D00              336             MOV R5,#00
0322 7590FE            337             MOV 90H,#0FEH   ;scan 1st row
0325 E590              338             MOV A,90H
0327 64FE              339             XRL A,#0FEH
0329 702A              340             JNZ ROW
                       341
032B ED                342             MOV A,R5
032C 2403              343             ADD A,#03H
032E FD                344             MOV R5,A
                       345
032F 7590FD            346             MOV 90H,#0FDH   ;scan 2nd row
0332 E590              347             MOV A,90H
0334 64FD              348             XRL A,#0FDH
0336 701D              349             JNZ ROW
0338 ED                350             MOV A,R5
0339 2403              351             ADD A,#03H
033B FD                352             MOV R5,A
                       353
033C 7590FB            354             MOV 90H,#0FBH   ;scan 3rd row
033F E590              355             MOV A,90H
0341 64FB              356             XRL A,#0FBH
0343 7010              357             JNZ ROW
0345 ED                358             MOV A,R5
0346 2403              359             ADD A,#03H
0348 FD                360             MOV R5,A
                       361
0349 7590F7            362             MOV 90H,#0F7H   ;scan 4th row
034C E590              363             MOV A,90H
034E 64F7              364             XRL A,#0F7H
0350 7003              365             JNZ ROW
0352 020320            366             LJMP KEYPD
                       367
                       368             ROW:
0355 E590              369                     MOV A,90H
0357 54F0              370             ANL A,#0F0H
0359 C4                371             SWAP A
                       372             REDO:
035A 13                373                     RRC A
035B 5003              374                     JNC KEY
035D 0D                375                     INC R5
035E 80FA              376                     SJMP REDO
                       377             KEY:
0360 51F1              378                     ACALL DELAY_500MSEC
0362 7590F0            379                     MOV 90H,#0F0H
0365 00                380                     NOP
0366 00                381                     NOP
0367 E590              382                     MOV     A,90H
                       383
0369 64F0              384                     XRL     A,#0F0H
036B 70F3              385                     JNZ     KEY
036D ED                386                     MOV     A,R5
036E 9001D2            387                     MOV DPTR,#KEYCODE
0371 93                388                     MOVC    A,@A+DPTR
                       389
0372 22                390             RET
                       391
                       392
                       393     CHECK_ALARM:
0373 22                394     RET
                       395
                       396     ;*************************************************************************************************
                       397     ;This module returns the validity of the entered PIN in the Acc.
                       398     ;Parameters:None
                       399     ;Return: Acc.
                       400     ;DEPENDANCIES: FIRST, READ_PASSWORD, SECOND, DISPCH2, KEYPD, CMD, DISP
                       401     ;*************************************************************************************************
                       402
                       403     VER_PASSWORD:
0374 7401              404             MOV A, #01H
0376 3149              405             ACALL CMD
0378 9001DE            406             MOV DPTR, #AUTH_MSG
037B 51AD              407             ACALL DISPCH2
037D 3144              408             ACALL SECOND
037F 7806              409             MOV R0, #06H
0381 7414              410             MOV A, #14H
                       411             LOOP5:
0383 3149              412             ACALL CMD
0385 D8FC              413             DJNZ R0, LOOP5
0387 740E              414             MOV A, #0EH
0389 3149              415             ACALL CMD
038B 1208D3            416             LCALL READ_PASSWORD
038E 7854              417             MOV R0, #54H
0390 756400            418             MOV FLAG1, #00H
0393 7904              419             MOV R1, #4H
                       420             LOOP4:
0395 86F0              421             MOV B, @R0
0397 7120              422             ACALL KEYPD
0399 B42A02            423             CJNE A, #'*', N103
039C 80D6              424             SJMP VER_PASSWORD
                       425             N103:
039E B5F01B            426             CJNE A, B, SET_FLAG
                       427             N102:
03A1 742A              428             MOV A, #'*'
03A3 51D7              429             ACALL DISP
03A5 08                430             INC R0
03A6 D9ED              431             DJNZ R1,LOOP4
03A8 E564              432             MOV A, FLAG1
03AA 75F000            433             MOV B, #00H
03AD B5F001            434             CJNE A, B, AUTH_FAIL
03B0 22                435             RET
                       436             AUTH_FAIL:
03B1 7401              437                     MOV A, #01H
03B3 3149              438                     ACALL CMD
03B5 9001FD            439                     MOV DPTR, #AUTH_FAIL_MSG
03B8 313A              440                     ACALL DISP_MSG
03BA 80B8              441                     SJMP VER_PASSWORD
                       442             SET_FLAG:
03BC 7564FF            443                     MOV FLAG1, #0FFH
03BF 80E0              444                     SJMP N102
                       445
                       446     EMERGENCY:
03C1 7174              447             ACALL VER_PASSWORD
03C3 7401              448             MOV A, #01H
03C5 3149              449             ACALL CMD
03C7 90020D            450             MOV DPTR, #EMERGENCY_MSG
03CA 51AD              451             ACALL DISPCH2
                       452             ;DO WHATEVER NEEDS TO BE DONE
03CC 22                453             RET
                       454
                       455
                       456     SET_BELL:
                       457             ;ACALL VER_PASSWORD
                       458             SET_BELL_VERIFIED:
03CD 7401              459             MOV A, #01H
03CF 3149              460             ACALL CMD
03D1 90021A            461             MOV DPTR, #BELL_MESSAGE
03D4 51AD              462             ACALL DISPCH2
03D6 3144              463             ACALL SECOND
03D8 900229            464             MOV DPTR, #BELL_OPTIONS
03DB 51AD              465             ACALL DISPCH2
03DD 740E              466             MOV A, #0EH
03DF 3149              467             ACALL CMD
                       468             LOOP8:
03E1 7120              469                     ACALL KEYPD
03E3 75F031            470                     MOV B, #31H
03E6 B5F003            471                     CJNE A, B, N14
03E9 0204F4            472                     JMP NEW_BELL
                       473                     N14:
03EC 75F032            474                     MOV B, #32H
03EF B5F0EF            475             CJNE A, B, LOOP8
                       476
                       477             EDIT_BELL:
03F2 D166              478             ACALL INPUT_DAY         ;now accumulator will contain the day value
03F4 F553              479             MOV TEMP_DAY, A
                       480             ;Load number of bells available for that day
03F6 900000            481             MOV DPTR, #00H
03F9 F582              482             MOV DPL, A
03FB 7950              483             MOV R1, #50H
03FD 756601            484             MOV COUNT9, #01H
0400 F1E0              485             ACALL READ_DATA
0402 7950              486             MOV R1, #50H
0404 E7                487             MOV A, @R1
                       488
0405 75F000            489             MOV B, #00H
0408 B5F009            490             CJNE A, B, HAS_BELL_ENTRY       ;if its non zero then that means it has entry
040B 900243            491             MOV DPTR, #NO_BELL
040E 51AD              492             ACALL DISPCH2
0410 51E4              493             ACALL DELAY_1SEC
0412 80B9              494             SJMP SET_BELL_VERIFIED          ;if its zero then give user chance to make an entry
                       495
                       496             HAS_BELL_ENTRY:
0414 E553              497                     MOV A, TEMP_DAY
0416 900000            498                     MOV DPTR, #00H
0419 F582              499                     MOV DPL, A
041B 7950              500                     MOV R1, #50H
041D 756601            501                     MOV COUNT9, #01H
0420 F1E0              502                     ACALL READ_DATA
0422 7950              503                     MOV R1, #50H
0424 E7                504                     MOV A, @R1
0425 C0E0              505                     PUSH ACC
0427 7401              506                     MOV A, #01H                             ;clear screen
0429 3149              507                     ACALL CMD
042B 900237            508                     MOV DPTR, #BELL_NUMBER_MSG      ;display number of bells i.e., max count
042E 51AD              509                     ACALL DISPCH2
0430 D0E0              510                     POP ACC                                         ;will contain max serial number
0432 120990            511                     LCALL HEX_BCD                           ;converts to bcd and output will be in acc[lo
0435 C0E0              512                     PUSH ACC                                        ;saving the bcd converted value
0437 F17D              513                     ACALL DISP_2DIG_NO
0439 745D              514                     MOV A, #']'
043B 51D7              515                     ACALL DISP
043D 3144              516                     ACALL SECOND
043F 740F              517                     MOV A, #0FH
0441 3149              518                     ACALL CMD
0443 D0E0              519                     POP ACC                                         ;copy the value of max. serial number
0445 85E040            520                     MOV 40H, ACC
0448 120978            521                     LCALL UNPACK                            ;now r2 and r3 will contain ascii value of th
044B 75F004            522                     MOV B, #04H
044E 7414              523                     MOV A, #14H
                       524                     LOOP9:
0450 3149              525                     ACALL CMD
0452 D5F0FB            526                     DJNZ B, LOOP9
0455 7120              527                     ACALL KEYPD
0457 51D7              528                     ACALL DISP
0459 B42A02            529                     CJNE A, #'*', CONTINUE_1
045C 80B6              530                     SJMP HAS_BELL_ENTRY
                       531                     CONTINUE_1:
045E B42304            532                     CJNE A, #'#', CONTINUE_2
0461 B185              533                     ACALL ERROR_EDIT_BELL
0463 80AF              534                     SJMP HAS_BELL_ENTRY
                       535                     CONTINUE_2:
0465 C3                536                     CLR C
0466 C0E0              537                     PUSH ACC                                        ;contains the 1st number in acsii mod
0468 9B                538                     SUBB A, R3                                      ;r3= msb of the max serial number in
0469 4006              539                     JC NEXT_ENTRY
046B 6004              540                     JZ NEXT_ENTRY
046D B185              541                     ACALL ERROR_EDIT_BELL
046F 80A3              542                     SJMP HAS_BELL_ENTRY
                       543                     NEXT_ENTRY:
0471 D0E0              544                     POP ACC                                         ;contains ascii value of first endter
0473 9430              545                     SUBB A, #30H
0475 C4                546                     SWAP A
0476 F9                547                     MOV R1, A                                       ;now r1 will contain msb of the enter
0477 C001              548                     PUSH 01H                                        ;save this value
0479 7120              549                     ACALL KEYPD
047B 51D7              550                     ACALL DISP
047D C3                551                     CLR C
047E B42A02            552                     CJNE A, #'*', CONTINUE_3
0481 8091              553                     SJMP HAS_BELL_ENTRY
                       554                     CONTINUE_3:
0483 B42304            555                     CJNE A, #'#', CONTINUE_4
0486 B185              556                     ACALL ERROR_EDIT_BELL
0488 808A              557                     SJMP HAS_BELL_ENTRY
                       558                     CONTINUE_4:
048A C3                559                     CLR C
048B C0E0              560                     PUSH ACC
048D 9A                561                     SUBB A, R2
048E 4006              562                     JC DONE_ENTERING_SERIAL
0490 6004              563                     JZ DONE_ENTERING_SERIAL
0492 B185              564                     ACALL ERROR_EDIT_BELL
0494 8114              565                     JMP HAS_BELL_ENTRY
                       566                     DONE_ENTERING_SERIAL:
0496 D0E0              567                     POP ACC                                 ;now A will contain the second digit in ascii
0498 C3                568                     CLR C
0499 9430              569                     SUBB A, #30H
049B D001              570                     POP 01H
049D 29                571                     ADD A, R1                               ;now acc will contain the user entered serial
049E 1209A1            572                     LCALL BCD_HEX
04A1 F57C              573                     MOV SERIAL, A                   ;saving the value of serial safely in the RAM
04A3 855383            574                     MOV DPH, TEMP_DAY
04A6 75F003            575                     MOV B, #03H
04A9 A4                576                     MUL AB
04AA F582              577                     MOV DPL,A
04AC 7954              578                     MOV R1, #54H
04AE 756603            579                     MOV COUNT9, #03H
04B1 F1E0              580                     ACALL READ_DATA
04B3 855452            581                     MOV HOURS, 54H
04B6 855551            582                     MOV MIN, 55H
04B9 7420              583                     MOV A, #' '
04BB 51D7              584                     ACALL DISP
04BD 120787            585                     LCALL DISP_TIME
                       586                     WAIT_FOR_ENTER:                 ;WAITING FOR USER TO CONFIRM THAT HE/SHE WANTS THIS B
04C0 7120              587                     ACALL KEYPD
04C2 B42A02            588                     CJNE A, #2AH, N15
04C5 8114              589                     JMP HAS_BELL_ENTRY
                       590                     N15:
04C7 B423F6            591                     CJNE A, #23H, WAIT_FOR_ENTER
04CA 75F001            592                     MOV B, #01H
04CD D1CA              593                     ACALL INPUT_HOUR_MINUTE ;READ THE TIME
04CF B1CC              594                     ACALL INPUT_DURATION
04D1 B1A5              595                     ACALL CONFIRM_BELL
                       596                     WAIT_FOR_ENTER_KEY_1:
04D3 7120              597                             ACALL KEYPD
04D5 B42A02            598                             CJNE A, #2AH, N17
04D8 61F2              599                             JMP EDIT_BELL
                       600                             N17:
04DA B423F6            601                             CJNE A, #23H, WAIT_FOR_ENTER_KEY_1
04DD 7401              602                     MOV A, #01H
04DF 3149              603                     ACALL CMD
04E1 90028B            604                     MOV DPTR, #BELL_ACK
04E4 51AD              605                     ACALL DISPCH2
04E6 855383            606                     MOV DPH, TEMP_DAY
04E9 E57C              607                     MOV A, SERIAL
04EB 75F003            608                     MOV B, #03H
04EE A4                609                     MUL AB
04EF F582              610                     MOV DPL, A
04F1 B193              611                     ACALL SAVE_BELL
04F3 22                612                     RET
                       613
                       614             NEW_BELL:
04F4 D166              615                     ACALL INPUT_DAY
04F6 F553              616                     MOV TEMP_DAY, A
04F8 75F001            617                     MOV B, #01H
04FB D1CA              618                     ACALL INPUT_HOUR_MINUTE
04FD B1CC              619                     ACALL INPUT_DURATION
04FF 900000            620                     MOV DPTR, #00H
0502 AC7D              621                     MOV R4, MODE
0504 E553              622                     MOV A, TEMP_DAY
0506 BC0202            623                     CJNE R4, #02H, ADD_NOTHING      ;THIS MEANS MODE 1
0509 2407              624                     ADD A, #7H
                       625                     ADD_NOTHING:
050B 756601            626                     MOV COUNT9, #01H
050E 7954              627                     MOV R1, #54H
0510 F582              628                     MOV DPL, A
0512 1207E0            629                     LCALL READ_DATA
0515 85547C            630                     MOV SERIAL, 54H                 ;if needed, add a comp. instruction to limit max coun
                       631                     ;MOV A, 54H
                       632                     ;LCALL HEX_BCD
0518 B1A5              633                     ACALL CONFIRM_BELL
                       634                     WAIT_FOR_ENTER_KEY_2:
051A 7120              635                     ACALL KEYPD
051C B42A02            636                     CJNE A, #2AH, N18
051F 80D3              637                     SJMP NEW_BELL
                       638                     N18:
0521 B423F6            639                     CJNE A, #23H, WAIT_FOR_ENTER_KEY_2
0524 AC7D              640                     MOV R4, MODE
0526 E553              641                     MOV A, TEMP_DAY
0528 BC0102            642                     CJNE R4, #01H, ITS_MODE_2
052B 8002              643                     SJMP NOTHING_TO_ADD
                       644                     ITS_MODE_2:
052D 2407              645                     ADD A, #07H
                       646                     NOTHING_TO_ADD:
052F F583              647                     MOV DPH, A
0531 7401              648                     MOV A, #01H
0533 120149            649                     LCALL CMD
0536 E57C              650                     MOV A, SERIAL
0538 F540              651                     MOV 40H, A
053A C0E0              652                     PUSH ACC
053C 12077D            653                     LCALL DISP_2DIG_NO
053F D0E0              654                     POP ACC
0541 04                655                     INC A
0542 75F003            656                     MOV B, #03H
0545 A4                657                     MUL AB
0546 F582              658                     MOV DPL, A
0548 B193              659                     ACALL SAVE_BELL
054A 1202E4            660                     LCALL DELAY_1SEC
054D 1202E4            661                     LCALL DELAY_1SEC
0550 7401              662                     MOV A, #01H
0552 3149              663                     ACALL CMD
0554 90028B            664                     MOV DPTR, #BELL_ACK
0557 1202AD            665                     LCALL DISPCH2
055A 3144              666                     ACALL SECOND
055C 900299            667                     MOV DPTR, #SERIAL_NO
055F 51AD              668                     ACALL DISPCH2
0561 E57C              669                     MOV A, SERIAL
0563 04                670                     INC A
0564 F540              671                     MOV 40H, A
0566 12077D            672                     LCALL DISP_2DIG_NO
0569 E57C              673                     MOV A, SERIAL
056B 04                674                     INC A
056C F554              675                     MOV 54H, A
056E 7854              676                     MOV R0, #54H
0570 756601            677                     MOV COUNT9, #01H
0573 900000            678                     MOV DPTR, #00H
0576 E553              679                     MOV A, TEMP_DAY
0578 B40102            680                     CJNE A, #01H, ADD_SOMETHING
057B 8002              681                     SJMP ADD_NOTHING_1
                       682                     ADD_SOMETHING:
057D 2407              683                     ADD A, #07H
                       684                     ADD_NOTHING_1:
057F F582              685                     MOV DPL, A
0581 120796            686                     LCALL WRITE_DATA
0584 22                687                     RET
                       688
                       689
                       690     ERROR_EDIT_BELL:
0585 7401              691             MOV A, #01H
0587 3149              692             ACALL CMD
0589 9001A6            693             MOV DPTR, #ERROR_MSG
058C 313A              694             ACALL DISP_MSG
058E 51E4              695             ACALL DELAY_1SEC
0590 51E4              696             ACALL DELAY_1SEC
0592 22                697             RET
                       698
                       699     SAVE_BELL:
0593 756603            700             MOV COUNT9, #03H
0596 855254            701             MOV 54H, HOURS
0599 855155            702             MOV 55H, MIN
059C 856A56            703             MOV 56H, DURATION
059F 7854              704             MOV R0, #54H
05A1 120796            705             LCALL WRITE_DATA
05A4 22                706             RET
                       707
                       708     CONFIRM_BELL:
05A5 7401              709             MOV A, #01H
05A7 120149            710             LCALL CMD
05AA 90027A            711             MOV DPTR, #CONFIRM
05AD 51AD              712             ACALL DISPCH2
05AF 3144              713             ACALL SECOND
05B1 120787            714             LCALL DISP_TIME
05B4 7414              715             MOV A, #14H
05B6 3149              716             ACALL CMD
05B8 E553              717             MOV A, TEMP_DAY
05BA 51BD              718             ACALL DISP_DAY
05BC 7414              719             MOV A, #14H
05BE 3149              720             ACALL CMD
05C0 E56A              721             MOV A, DURATION
05C2 2430              722             ADD A, #30H
05C4 51D7              723             ACALL DISP
05C6 900287            724             MOV DPTR, #SECONDS
05C9 51AD              725             ACALL DISPCH2
05CB 22                726             RET
                       727
                       728     ;*************************************************************************************************
                       729     ;This module is used to enter the duration Option
                       730     ;Parameter:None
                       731     ;Return: value of duration option in Acc
                       732     ;DEPENDANCIES: CMD, KEYPD, SECOND, FIRST, DISPCH2
                       733     ;*************************************************************************************************
                       734     INPUT_DURATION:
05CC 7401              735             MOV A, #01H
05CE 3149              736             ACALL CMD
05D0 900261            737             MOV DPTR, #EDIT_DURATION
05D3 51AD              738             ACALL DISPCH2
05D5 3144              739             ACALL SECOND
05D7 900272            740             MOV DPTR, #DURATION_MSG
05DA 1202AD            741             LCALL DISPCH2
05DD 740F              742             MOV A, #0FH
05DF 3149              743             ACALL CMD
05E1 7120              744             ACALL KEYPD
05E3 51D7              745             ACALL DISP
05E5 B43004            746             CJNE A, #'0', CHECK_NEXT_OPTION_1
05E8 D111              747             ACALL ERROR_ENTRY
05EA 80E0              748             SJMP INPUT_DURATION
                       749             CHECK_NEXT_OPTION_1:
05EC B42A02            750             CJNE A, #'*' , CHECK_NEXT_OPTION_2
05EF 80DB              751             SJMP INPUT_DURATION
                       752             CHECK_NEXT_OPTION_2:
05F1 B42304            753             CJNE A, #'#', CORRECT_ENTRY
05F4 D111              754             ACALL ERROR_ENTRY
05F6 80D4              755             SJMP INPUT_DURATION
                       756             CORRECT_ENTRY:
05F8 C3                757             CLR C
05F9 75F030            758             MOV B, #30H
05FC 95F0              759             SUBB A, B
05FE C0E0              760             PUSH ACC
                       761             WAIT_FOR_ENTER_KEY:
0600 7120              762                     ACALL KEYPD
0602 B42A04            763                     CJNE A, #2AH, N16
0605 D0E0              764                     POP ACC                 ;JUST TO FREE THE STACK MEM. WHILE LOOPING. IF NOT PRESENT ST
0607 80C3              765                     JMP INPUT_DURATION
                       766                     N16:
0609 B423F4            767                     CJNE A, #23H, WAIT_FOR_ENTER_KEY
060C D0E0              768             POP ACC
060E F56A              769             MOV DURATION, A
0610 22                770             RET
                       771     ERROR_ENTRY:
0611 7401              772             MOV A, #01H
0613 120149            773             LCALL CMD
0616 9001A6            774             MOV DPTR, #ERROR_MSG
0619 313A              775             ACALL DISP_MSG
061B 51E4              776             ACALL DELAY_1SEC
061D 22                777     RET
                       778     ;*************************************************************************************************
                       779     ;This module sets the time and day. PIN is required to set the time. If incorrect password is
                       780     ;entered then user will again be asked to enter password and only reset breaks the loop
                       781     ;Parameters:None
                       782     ;Return:None(affects the RTC time)
                       783     ;DEPENDANCIES: VER_PASSWORD, FIRST, SECOND, DISP_MSG, DISP_DAY, CMD, KEYPD, DISP, ERROR, ERROR_DAY
                       784     ;                       DELAY_1SEC, READ_RTC
                       785     ;*************************************************************************************************
                       786
                       787     SET_TIME:
061E 7174              788             ACALL VER_PASSWORD              ;ENTER PASSWORD MODULE
0620 75F000            789             MOV B, #00H
0623 D1CA              790             ACALL INPUT_HOUR_MINUTE         ;THIS FUNCTION PLACES THE VALUE OF READ NUMBER IN HOURS AND M
0625 756001            791             MOV ADD_LOWL, #01H
0628 855161            792             MOV DAVAVA, MIN
062B 1208DF            793             LCALL WRITE_BYTE
062E 756002            794             MOV ADD_LOWL, #02H
0631 855261            795             MOV DAVAVA, HOURS
0634 1208DF            796             LCALL WRITE_BYTE                ;AFTER EXECUTION OF THIS MODULE RTC WILL BE SET
                       797             ;STARTING TO READ THE WEEK DAY
0637 D166              798             ACALL INPUT_DAY                 ;day value will be present in acc.
0639 756003            799             MOV ADD_LOWL, #03H              ;starting to send the data to RTC
063C F561              800             MOV DAVAVA, A
063E 1208DF            801             LCALL WRITE_BYTE                ;write the data to RTC
                       802
0641 7401              803             MOV A, #01H
0643 3149              804             ACALL CMD
0645 9001EE            805             MOV DPTR, #MESSAGE5
0648 313A              806             ACALL DISP_MSG
064A 3144              807             ACALL SECOND
064C 120888            808             LCALL READ_RTC
064F C001              809             PUSH 01H
0651 7903              810             MOV R1, #03H
0653 7414              811             MOV A, #14H
                       812             LOOP7:
0655 3149              813             ACALL CMD
0657 D9FC              814             DJNZ R1, LOOP7
0659 D001              815             POP 01H
065B F187              816             ACALL DISP_TIME
065D 7420              817             MOV A, #20H
065F 51D7              818             ACALL DISP
0661 E567              819             MOV A, DAY
0663 51BD              820             ACALL DISP_DAY                  ;while calling the DISP_DAY module make sure that
                       821
0665 22                822             RET
                       823
                       824     ;*************************************************************************************************
                       825     ;This module takes input from user to enter the day in number from 1-7 and also displays the 3
                       826     ;lettered corresponding day beside it
                       827     ;Parameter:None
                       828     ;Return:day value in Acc
                       829     ;DEPENDANCIES:DISP_MSG, SECOND, CMD, ERROR_DAY, KEYPD, DISP_DAY
                       830     ;*************************************************************************************************
                       831     INPUT_DAY:
0666 7401              832             MOV A, #1H                              ;CLEARING THE SCREEN TO BEGIN FRESH
0668 3149              833             ACALL CMD
066A 900199            834             MOV DPTR, #MESSAGE3
066D 313A              835             ACALL DISP_MSG
066F 3144              836             ACALL SECOND                    ;BRINGING THE CURSOR TO SECOND LINE FIRST POSITION
0671 3149              837             ACALL CMD
0673 740F              838             MOV A, #0FH                     ;TURNING ON THE CURSOR
0675 3149              839             ACALL CMD
0677 7805              840             MOV R0, #5H                     ;SHIFTING THE CURSOR TO THE MIDDLE
0679 7414              841             MOV A, #14H
                       842             LOOP6:
067B 3149              843             ACALL CMD
067D D8FC              844             DJNZ R0, LOOP6
067F 7120              845             ACALL KEYPD                             ;READ A CHARACTER
0681 51D7              846             ACALL DISP
0683 B42302            847             CJNE A, #23H, N10               ;COMPARING THE VALUE OF KEY WITH #
0686 8031              848             SJMP ERROR_DAY
                       849             N10:
0688 B42A02            850             CJNE A, #2AH, N11               ;COMPARING THE VALUE OF KEY WITH *
068B 802C              851             SJMP ERROR_DAY
                       852             N11:
068D B43002            853             CJNE A, #30H, N12               ;COMPARING THE VALUE OF KEY WITH 0 AS VALID CHARACTERS ARE ON
0690 8027              854             SJMP ERROR_DAY
                       855             N12:
0692 F9                856             MOV R1,A                                ;SAVING THE VALUE OF A
0693 C001              857             PUSH 01H                                ;THE DISP_DAY FUNCTION WIHICH WE WILL USE LATER WILL
0695 C3                858             CLR C                                   ;... SO WE HAVE TO USE PUSH TO SAVE R1
0696 9438              859             SUBB A, #38H                    ;ERROR CHECKING BY CHECKING IF THE ANSWER COMES OUT NEGATIVE
0698 501F              860             JNC ERROR_DAY                   ;EX: INPUT IS 37H(VALID) SO 37H-38H=-1H HENCE C=1. HENCE VALI
069A C3                861             CLR C                                   ;EX: IF INPUT IS 39H(INVALID) SO ASNWER IS 1H AND C=0
069B 7414              862             MOV A, #14H                             ;SHIFTING RIGHT CURSOR TO GIVE SPACE
069D 3149              863             ACALL CMD
069F E9                864             MOV A,R1                                ;RESTORING THE VALUE OF A
06A0 9430              865             SUBB A, #30H                    ;GETTING ACTUAL VALUE FROM ASCII VALUE
06A2 51BD              866             ACALL DISP_DAY                  ;DISPLAYING THE DAY AS SOON AS WE PRESS THE KEY
06A4 740C              867             MOV A, #0CH
06A6 3149              868             ACALL CMD
                       869             LOOP3:                                  ;THIS LOOP IS FOR USER TO ENTER 'ENTER KEY'
06A8 7120              870             ACALL KEYPD                             ;INPUTTING THE ENTER KEY OR CLEAR KEY
06AA B42A02            871             CJNE A, #2AH, N13               ;IF USER ENTERS * WHOLE SCREEN IS RESET
06AD 80B7              872             JMP INPUT_DAY
                       873             N13:
06AF B423F6            874             CJNE A, #23H, LOOP3     ;IF USER ENTERS # IT IS CONSIDERED AS 'ENTER KEY'
06B2 D001              875             POP 01H                                 ;01H STANDS FOR R1
06B4 E9                876             MOV A, R1
06B5 C3                877             CLR C
06B6 9430              878             SUBB A, #30H                    ;USE THIS VALUE OF DAY
06B8 22                879             RET
                       880
                       881     ERROR_DAY:
06B9 313F              882             ACALL FIRST                     ;MOVING THE CURSOR TO FIRST LINE AS THE ERROR HAS TO BE PRINT
06BB 740C              883             MOV A, #0CH                     ;TURNING OFF THE CURSOR
06BD 3149              884             ACALL CMD
06BF 9001A6            885             MOV DPTR, #ERROR_MSG
06C2 313A              886             ACALL DISP_MSG
06C4 51E4              887             ACALL DELAY_1SEC
06C6 51E4              888             ACALL DELAY_1SEC
06C8 809C              889             JMP INPUT_DAY
                       890
                       891     ;*************************************************************************************************
                       892     ;This module is used to read hour and minute from the keypad. calling function must specify whether
                       893     ;it is set_time or set_bell by passing value on register B.
                       894     ;Parameter:B -> 0H if SET_TIME B->01h if SET_BELL
                       895     ;Return: value will be placed in HOURS AND MIN
                       896     ;DEPENDANCIES:DISP, DISPCH2, DISP_MSG, CMD, FIRST, SECOND, KEYPD
                       897     ;*************************************************************************************************
                       898     INPUT_HOUR_MINUTE:
06CA 7401              899             MOV A, #01H
06CC 3149              900             ACALL CMD
06CE 7401              901             MOV A, #01H
06D0 C3                902             CLR C
06D1 95F0              903             SUBB A, B
06D3 6005              904             JZ ITS_BELL
06D5 900183            905             MOV DPTR, #MESSAGE1
06D8 8003              906             SJMP NEXT
                       907             ITS_BELL:
06DA 900252            908             MOV DPTR, #NEW_BELL_MSG
                       909             NEXT:
06DD 313A              910             ACALL DISP_MSG
06DF 3144              911             ACALL SECOND                    ;MOVING CURSOR TO SECOND LINE
06E1 90018E            912             MOV DPTR, #MESSAGE2
06E4 313A              913             ACALL DISP_MSG
06E6 3144              914             ACALL SECOND
06E8 740F              915             MOV A, #0FH                     ;TURNING ON THE CURSOR
06EA 3149              916             ACALL CMD
06EC 7905              917             MOV R1, #5H                     ;SHIFTING CURSOR 5 TIMES
06EE 7414              918             LOOP1: MOV A, #14H
06F0 3149              919                     ACALL CMD
06F2 D9FA              920             DJNZ R1, LOOP1
                       921             ;STARTING TO READ THE VALUE OF HOUR
06F4 7120              922             ACALL KEYPD
06F6 51D7              923             ACALL DISP
06F8 B42302            924             CJNE A, #23H, N1                ;COMPARING THE VALUE OF KEY WITH #
06FB 8033              925             SJMP ERROR
                       926             N1:
06FD B42A03            927             CJNE A, #2AH, N2                ;COMPARING THE VALUE OF KEY WITH *
0700 0206CA            928             LJMP INPUT_HOUR_MINUTE
                       929             N2:
0703 F9                930             MOV R1,A
0704 C3                931             CLR C
0705 9433              932             SUBB A, #33H                    ;i.e., IF ENTERED NUMBER IS GREATER THAN 2(EXAMPLE IS 30 HOUR
0707 5027              933             JNC ERROR
0709 C3                934             CLR C
070A E9                935             MOV A, R1
070B 9430              936             SUBB A, #30H                    ;ASCII ADJUSTMENTS
070D C4                937             SWAP A                                  ;EX: 31H-30H=01H AFTER SWAPPING IT WILL BE 10H
070E F9                938             MOV R1, A                               ;SAVING THE VALUE OF A
070F 7120              939             ACALL KEYPD
0711 51D7              940             ACALL DISP
0713 B42303            941             CJNE A, #23H, N3                ;COMPARING THE VALUE OF KEY WITH #
0716 020730            942             JMP ERROR
                       943             N3:
0719 B42A02            944             CJNE A, #2AH, N4                ;COMPARING THE VALUE OF KEY WITH *
071C 80AC              945             JMP INPUT_HOUR_MINUTE
                       946             N4:
071E C3                947             CLR C
071F 9430              948             SUBB A, #30H                    ;ADJUSTMENTS
0721 29                949             ADD A,R1                                ;EXAMPLE CONTINUED: NOW PREVIOUS 10H IS ADDED WITH LE
0722 F9                950             MOV R1,A                                ;AGAIN SAVING
0723 C3                951             CLR C
0724 9425              952             SUBB A,#25H                             ;CHECKING IF THE HOUR VALUE IS GRATER THAN 24
0726 5008              953             JNC ERROR
0728 7414              954             MOV A, #14H                             ;SHIFT CURSOR RIGHT ONCE TO AVOID THE COLON
072A 3149              955             ACALL CMD
072C 8952              956             MOV HOURS, R1
072E 800D              957             SJMP READ_MINUTES
                       958
                       959             ;START OF ERROR HANDLING
                       960             ERROR:
0730 313F              961                     ACALL FIRST
0732 9001A6            962                     MOV DPTR, #ERROR_MSG
0735 313A              963                     ACALL DISP_MSG
0737 51E4              964                     ACALL DELAY_1SEC
0739 51E4              965                     ACALL DELAY_1SEC
073B 808D              966             JMP INPUT_HOUR_MINUTE
                       967
                       968             ;STARTING TO READ THE MINUTES
                       969             READ_MINUTES:
073D 7120              970             ACALL KEYPD
073F 51D7              971             ACALL DISP
0741 B42302            972             CJNE A, #23H, N5                ;COMPARING THE VALUE OF KEY WITH #
0744 80EA              973             SJMP ERROR
                       974             N5:
0746 B42A03            975             CJNE A, #2AH, N6                ;COMPARING THE VALUE OF KEY WITH *
0749 0206CA            976             LJMP INPUT_HOUR_MINUTE
                       977             N6:
074C F8                978             MOV R0,A
074D C3                979             CLR C
074E 9436              980             SUBB A, #36H                    ;i.e., IF ENTERED NUMBER IS GREATER THAN 5(EXAMPLE IS 60 MINU
0750 50DE              981             JNC ERROR
0752 E8                982             MOV A, R0
0753 C3                983             CLR C
0754 9430              984             SUBB A, #30H                    ;AGAIN SAME PROCEDURES AS DONE WITH HOURS
0756 C4                985             SWAP A
0757 F8                986             MOV R0, A
0758 7120              987             ACALL KEYPD
075A 51D7              988             ACALL DISP
075C B42302            989             CJNE A, #23H, N7                ;COMPARING THE VALUE OF KEY WITH #
075F 80CF              990             SJMP ERROR
                       991             N7:
0761 B42A03            992             CJNE A, #2AH, N8                ;COMPARING THE VALUE OF KEY WITH *
0764 0206CA            993             LJMP INPUT_HOUR_MINUTE
                       994             N8:
0767 C3                995             CLR C
0768 9430              996             SUBB A, #30H
076A 28                997             ADD A, R0
076B F8                998             MOV R0,A
076C 740C              999             MOV A, #0CH                     ;TURNING OFF THE CURSOR
076E 3149             1000             ACALL CMD
                      1001             LOOP2:
0770 7120             1002                     ACALL KEYPD
0772 B42A02           1003                     CJNE A, #2AH, N9
0775 C1CA             1004                     JMP INPUT_HOUR_MINUTE
                      1005                     N9:
0777 B423F6           1006                     CJNE A, #23H, LOOP2
077A 8851             1007             MOV MIN, R0
077C 22               1008             RET
                      1009
                      1010
                      1011     ;*************************************************************************************************
                      1012     ;This module outputs the 2-digit BCD number on the LCD
                      1013     ;Parameters:number to be displayed in 40H
                      1014     ;Return:None
                      1015     ;DEPENDANCIES:UNPACK, DISP
                      1016     ;*************************************************************************************************
                      1017
                      1018     DISP_2DIG_NO:
077D 120978           1019             LCALL UNPACK
0780 EB               1020             MOV A, R3
0781 51D7             1021             ACALL DISP
0783 EA               1022             MOV A, R2
0784 51D7             1023             ACALL DISP
0786 22               1024             RET
                      1025     ;*************************************************************************************************
                      1026     ;This module will display the VALUES PRESENT IN HOURS AND MIN VARIABLE on LCD in format HH:mm DAY
                      1027     ;Parameters:HOURS, MIN
                      1028     ;Return:None
                      1029     ;DEPENDANCIES:DISP_DAY, DISP, UNPACK
                      1030     ;*************************************************************************************************
                      1031     DISP_TIME:
0787 855240           1032             MOV 40h, HOURS
078A F17D             1033             ACALL DISP_2DIG_NO
078C 743A             1034             MOV A, #':'
078E 51D7             1035             ACALL DISP
0790 855140           1036             MOV 40h, MIN
0793 F17D             1037             ACALL DISP_2DIG_NO
0795 22               1038             RET
                      1039     ;*************************************************************************************************
                      1040     ;This module is used to write data to EEPROM. User has to pass the starting address of the data
                      1041     ;through the R0 register, location on the EEPROM through the DPTR and the count of the data through
                      1042     ;COUNT9. Rest everything is handled by this module
                      1043     ;Parameters: DPTR, R0, COUNT9
                      1044     ;DEPENDANCIES:EEPROM_START, EEPROM_DELAY, SEND_DATA, EEPROM_STOP
                      1045     ;*************************************************************************************************
                      1046     WRITE_DATA:
0796 12080E           1047             CALL EEPROM_START
0799 74A0             1048             MOV A,#0A0H
079B 12084C           1049             CALL SEND_DATA
079E E582             1050             MOV A,DPL                       ;LOCATION ADDRESS
07A0 12084C           1051             CALL SEND_DATA
07A3 E583             1052             MOV A,DPH                       ;LOCATION ADDRESS
07A5 12084C           1053             CALL SEND_DATA
07A8 8664             1054             MOV EEPROM_DATA,@R0
07AA E564             1055             MOV A,EEPROM_DATA       ;DATA TO BE SEND
07AC 12084C           1056             CALL SEND_DATA
07AF 12082D           1057             CALL EEPROM_STOP
07B2 1208C6           1058             LCALL EEPROM_DELAY
07B5 1208C6           1059             LCALL EEPROM_DELAY
07B8 12080E           1060             CALL EEPROM_START
07BB 74A0             1061             MOV A,#0A0H
07BD 12084C           1062             CALL SEND_DATA
07C0 E582             1063             MOV A,DPL                        ;LOCATION ADDRESS
07C2 12084C           1064             CALL SEND_DATA
07C5 E583             1065             MOV A,DPH                        ;LOCATION ADDRESS
07C7 12084C           1066             CALL SEND_DATA
07CA 8664             1067             MOV EEPROM_DATA,@R0
07CC E564             1068             MOV A,EEPROM_DATA        ;DATA TO BE SEND
07CE 12084C           1069             CALL SEND_DATA
07D1 12082D           1070             CALL EEPROM_STOP
07D4 1208C6           1071             LCALL   EEPROM_DELAY
07D7 1208C6           1072             LCALL   EEPROM_DELAY
07DA A3               1073             INC DPTR
07DB 08               1074             INC R0
07DC D566B7           1075             DJNZ COUNT9,WRITE_DATA
07DF 22               1076             RET
                      1077
                      1078     ;*************************************************************************************************
                      1079     ;This module is used to read the data from EEPROM. Location on the EEPROM is passed through the
                      1080     ;DPTR and data is returned to the RAM in the location determined by the R1 and number of bytes read
                      1081     ;is determined by the COUNT9
                      1082     ;Parameters:COUNT9, DPTR, R1
                      1083     ;Return:data on RAM location pointed by R1
                      1084     ;DEPENDANCIES:EEPROM_START, EEPROM_DELAY,SEND_DATA, EEPROM_STOP
                      1085     ;*************************************************************************************************
                      1086     READ_DATA:
07E0 12080E           1087             CALL EEPROM_START
07E3 74A0             1088             MOV A,#0A0H
07E5 12084C           1089             CALL SEND_DATA
07E8 E582             1090             MOV A,DPL                        ;LOCATION ADDRESS
07EA 12084C           1091             CALL SEND_DATA
07ED E583             1092             MOV A,DPH                        ;LOCATION ADDRESS
07EF 12084C           1093             CALL SEND_DATA
07F2 12080E           1094             CALL EEPROM_START
07F5 74A1             1095             MOV A,#0A1H
07F7 12084C           1096             CALL SEND_DATA
07FA 12086E           1097             CALL GET_DATA
07FD 12082D           1098             CALL EEPROM_STOP
0800 1208C6           1099             LCALL   EEPROM_DELAY
0803 1208C6           1100             LCALL   EEPROM_DELAY
0806 A3               1101             INC DPTR
0807 A73C             1102             MOV @R1,3CH                              ; STORE
0809 09               1103             INC R1
080A D566D3           1104             DJNZ COUNT9,READ_DATA
080D 22               1105             RET
                      1106
                      1107     ;*************************************************************************************************
                      1108     ;This module is used to initialize the eeprom line
                      1109     ;start bit is high to low transition on the sda while the scl is high
                      1110     ;hence the flow of the module is
                      1111     ;high sda -- high scl -- hold the scl high -- make sda low -- hold scl high --  make scl low
                      1112     ;Parameters:None
                      1113     ;Return:None
                      1114     ;DEPENDANCIES:None
                      1115     ;*************************************************************************************************
                      1116
                      1117     EEPROM_START:
080E D2A1             1118             SETB SDA
0810 00               1119             NOP
0811 00               1120             NOP
0812 00               1121             NOP
0813 00               1122             NOP
0814 00               1123             NOP
0815 00               1124             NOP
0816 00               1125             NOP
0817 D2A0             1126             SETB SCL
0819 00               1127             NOP
081A 00               1128             NOP
081B 00               1129             NOP
081C 00               1130             NOP
081D 00               1131             NOP
081E 00               1132             NOP
081F 00               1133             NOP
0820 00               1134             NOP
0821 C2A1             1135             CLR SDA
0823 00               1136             NOP
0824 00               1137             NOP
0825 00               1138             NOP
0826 00               1139             NOP
0827 00               1140             NOP
0828 00               1141             NOP
0829 00               1142             NOP
082A C2A0             1143             CLR SCL
082C 22               1144             RET
                      1145
                      1146     ;*************************************************************************************************
                      1147     ;This module is used to mark stop of EEPROM data flow
                      1148     ;stop bit is low to high transition on SDA while SCL is maintained high
                      1149     ;Parameters:None
                      1150     ;Return:None
                      1151     ;DEPENDANCIES:None
                      1152     ;*************************************************************************************************
                      1153     EEPROM_STOP:
082D C2A1             1154             CLR SDA
082F 00               1155             NOP
0830 00               1156             NOP
0831 00               1157             NOP
0832 00               1158             NOP
0833 00               1159             NOP
0834 00               1160             NOP
0835 00               1161             NOP
0836 D2A0             1162             SETB SCL
0838 00               1163             NOP
0839 00               1164             NOP
083A 00               1165             NOP
083B 00               1166             NOP
083C 00               1167             NOP
083D 00               1168             NOP
083E 00               1169             NOP
083F 00               1170             NOP
0840 D2A1             1171             SETB SDA
0842 00               1172             NOP
0843 00               1173             NOP
0844 00               1174             NOP
0845 00               1175             NOP
0846 00               1176             NOP
0847 00               1177             NOP
0848 00               1178             NOP
0849 C2A0             1179             CLR SCL
084B 22               1180             RET
                      1181
                      1182     ;*************************************************************************************************
                      1183     ;This module sends the data to the EEPROM through Acc.
                      1184     ;this module rotates left the data through carry and puts the carry to the SDA pin
                      1185     ;Parameters:Acc
                      1186     ;Return:None(writes data onto EEPROM)
                      1187     ;DEPENDANCIES:EEPROM_DELAY, CLOCK
                      1188     ;*************************************************************************************************
                      1189     SEND_DATA:
084C 7F00             1190             MOV R7,#00H
                      1191             SEND:
084E 33               1192                     RLC A
084F 92A1             1193                     MOV SDA,C
0851 1208B9           1194                     CALL CLOCK
0854 0F               1195                     INC R7
0855 BF08F6           1196                     CJNE R7,#08,SEND
0858 D2A1             1197             SETB  SDA
085A 00               1198             NOP
085B 00               1199             NOP
085C 00               1200             NOP
085D 00               1201             NOP
085E 00               1202             NOP
085F 00               1203             NOP
0860 D2A0             1204             SETB SCL
0862 20A1FD           1205             JB SDA,$
0865 1208C6           1206             CALL EEPROM_DELAY
0868 C2A0             1207             CLR SCL
086A 1208C6           1208             CALL EEPROM_DELAY
086D 22               1209             RET
                      1210
                      1211     ;*************************************************************************************************
                      1212     ;This module reads the data from the EEPROM into the RAM location 3CH
                      1213     ;Parameters: None
                      1214     ;Return: data in 3CH
                      1215     ;DEPENDANCIES:CLOCK
                      1216     ;*************************************************************************************************
                      1217     GET_DATA:
086E D2A1             1218             SETB SDA
0870 7F00             1219             MOV R7,#00H
0872 E4               1220             CLR A
                      1221             GET:
0873 D2A0             1222                     SETB SCL
0875 00               1223                     NOP
0876 00               1224                     NOP
0877 A2A1             1225                     MOV C,SDA
0879 33               1226                     RLC A
087A C2A0             1227                     CLR SCL
087C 0F               1228                     INC R7
087D BF08F3           1229                     CJNE R7,#08,GET
0880 D2A1             1230             SETB SDA
0882 1208B9           1231             CALL CLOCK
0885 F53C             1232             MOV 3CH,A
0887 22               1233             RET
                      1234     ;*************************************************************************************************
                      1235     ;This module reads all the Parameters of the RTC by calling other functions
                      1236     ;Parameters:None
                      1237     ;Return:MIN, HOURS, DAY
                      1238     ;DEPENDANCIES:READ_BYTE, I2C_STOP
                      1239     ;*************************************************************************************************
                      1240     READ_RTC:
0888 756000           1241             MOV     ADD_LOWL,#00h
088B 120916           1242             LCALL   READ_BYTE
088E 856150           1243             MOV     SEC,DAVAVA
0891 120988           1244             LCALL   I2C_STOP
0894 756001           1245             MOV     ADD_LOWL,#01h
0897 120916           1246             LCALL   READ_BYTE
089A 856151           1247             MOV     MIN,DAVAVA
089D 120988           1248             LCALL   I2C_STOP
08A0 756002           1249             MOV     ADD_LOWL,#02h
08A3 120916           1250             LCALL   READ_BYTE
08A6 856152           1251             MOV     HOURS,DAVAVA
08A9 120988           1252             LCALL   I2C_STOP
08AC 756003           1253             MOV     ADD_LOWL,#03h
08AF 120916           1254             LCALL   READ_BYTE
08B2 856167           1255             MOV     DAY,DAVAVA
08B5 120988           1256             LCALL   I2C_STOP
08B8 22               1257         RET
                      1258
                      1259     ;*************************************************************************************************
                      1260     ;This module generates clock for EEPROM communication
                      1261     ;Parameters:None
                      1262     ;Return:None
                      1263     ;DEPENDANCIES:None
                      1264     ;*************************************************************************************************
                      1265     CLOCK:
08B9 D2A0             1266             SETB SCL
08BB 00               1267             NOP
08BC 00               1268             NOP
08BD 00               1269             NOP
08BE 00               1270             NOP
08BF 00               1271             NOP
08C0 00               1272             NOP
08C1 00               1273             NOP
08C2 00               1274             NOP
08C3 C2A0             1275             CLR SCL
08C5 22               1276             RET
                      1277
                      1278     ;*************************************************************************************************
                      1279     ;This module generates a delay of 3ms
                      1280     ;Parameters:None
                      1281     ;Return:None
                      1282     ;DEPENDANCIES:None
                      1283     ;*************************************************************************************************
                      1284     EEPROM_DELAY:
08C6 75330B           1285             MOV 33H,#11      ;DELAY OF 3 MSEC
                      1286             EEPROM_DELAY_1:
08C9 7532FF           1287                     MOV 32H,#0FFH
08CC D532FD           1288                     DJNZ 32H,$
08CF D533F7           1289                     DJNZ 33H,EEPROM_DELAY_1
08D2 22               1290                     RET
                      1291
                      1292     ;*************************************************************************************************
                      1293     ;This module reads the stored PIN from EEPROM and loads it to RAM location 54H
                      1294     ;Parameters:None
                      1295     ;Return:PIN on RAM location 0x54
                      1296     ;DEPENDANCIES:READ_DATA
                      1297     ;*************************************************************************************************
                      1298     READ_PASSWORD:
08D3 7954             1299             MOV R1, #54H
08D5 907001           1300             MOV DPTR, #7001H
08D8 756604           1301             MOV COUNT9, #4H
08DB 1207E0           1302             LCALL READ_DATA
08DE 22               1303             RET
                      1304
                      1305     ;*************************************************************************************************
                      1306     ;This module writes the values to RTC
                      1307     ;Parameters: data to be loaded in DAVAVA, address of register in ADD_LOWL
                      1308     ;Return:None
                      1309     ;DEPENDANCIES:LOOP_BYTE
                      1310     ;*************************************************************************************************
                      1311     WRITE_BYTE:
08DF C2A1             1312             CLR     SDA                   ;start bit
08E1 C2A0             1313             CLR     SCL
08E3 74D0             1314             MOV     A,#CONT_BYTE_W        ;send control byte
08E5 120956           1315             LCALL   LOOP_BYTE
08E8 D2A1             1316             SETB    SDA
08EA D2A0             1317             SETB    SCL
08EC B2B0             1318             CPL             0B0H
08EE 20A1EE           1319             JB      SDA,WRITE_BYTE        ;loop until busy
08F1 C2A0             1320             CLR     SCL
08F3 E560             1321             MOV     A,ADD_LOWL             ;send address low
08F5 120956           1322             LCALL   LOOP_BYTE
08F8 D2A1             1323             SETB    SDA
08FA D2A0             1324             SETB    SCL
08FC 20A1E0           1325             JB      SDA,WRITE_BYTE        ;loop until busy
08FF C2A0             1326             CLR     SCL
0901 E561             1327             MOV     A,DAVAVA                ;send DAVAVA
0903 120956           1328             LCALL   LOOP_BYTE
0906 D2A1             1329             SETB    SDA
0908 D2A0             1330             SETB    SCL
090A 20A1D2           1331             JB      SDA,WRITE_BYTE        ;loop until busy
090D C2A1             1332             CLR     SDA
090F C2A0             1333             CLR     SCL
0911 D2A0             1334             SETB    SCL                   ;stop bit
0913 D2A1             1335             SETB    SDA
0915 22               1336             RET
                      1337
                      1338
                      1339     ;*************************************************************************************************
                      1340     ;This module will read a single Parameter from the RTC.
                      1341     ;Parameters: ADD_LOWL must contain the address of required register
                      1342     ;OUTPUT:DAVAVA will contain the data
                      1343     ;DEPENDANCIES:LOOP_BYTE, LOOP_READ
                      1344     ;*************************************************************************************************
                      1345     READ_BYTE:
0916 C2A1             1346             CLR     SDA                   ;start bit
0918 C2A0             1347             CLR     SCL
091A 74D0             1348             MOV     A,#CONT_BYTE_W        ;send control byte
091C 3156             1349             ACALL   LOOP_BYTE
091E D2A1             1350             SETB    SDA
0920 D2A0             1351             SETB    SCL
0922 20A1F1           1352             JB      SDA,READ_BYTE         ;loop until busy
0925 C2A0             1353             CLR     SCL
0927 E560             1354             MOV     A,ADD_LOWL             ;send address low
0929 3156             1355             ACALL   LOOP_BYTE
092B D2A1             1356             SETB    SDA
092D D2A0             1357             SETB    SCL
092F 20A1E4           1358             JB      SDA,READ_BYTE         ;loop until busy
0932 C2A0             1359             CLR     SCL
                      1360
0934 D2A0             1361             SETB    SCL
0936 D2A1             1362             SETB    SDA
0938 C2A1             1363             CLR     SDA                   ;start bit
093A C2A0             1364             CLR     SCL
093C 74D1             1365             MOV     A,#CONT_BYTE_R        ;send control byte
093E 3156             1366             ACALL   LOOP_BYTE
0940 D2A1             1367             SETB    SDA
0942 D2A0             1368             SETB    SCL
0944 20A1CF           1369             JB      SDA,READ_BYTE         ;loop until busy
0947 C2A0             1370             CLR     SCL
0949 3166             1371             ACALL   LOOP_READ
094B D2A1             1372             SETB    SDA
094D D2A0             1373             SETB    SCL
094F C2A0             1374             CLR     SCL
                      1375
0951 D2A0             1376             SETB    SCL                   ;stop bit
0953 D2A1             1377             SETB    SDA
0955 22               1378             RET
                      1379
                      1380
                      1381     ;*************************************************************************************************
                      1382     ;This module writes the content of DAVAVA to the RTC one bit at a time
                      1383     ;Parameters:DAVAVA
                      1384     ;Return:None but RTC will br set
                      1385     ;DEPENDANCIES:None
                      1386     ;*************************************************************************************************
                      1387     LOOP_BYTE:
0956 C002             1388             PUSH    02H
0958 7A08             1389             MOV     R2,#08H
                      1390             LOOP_SEND:
095A 33               1391                     RLC     A
095B 92A1             1392                     MOV     SDA,C
095D D2A0             1393                     SETB    SCL
095F C2A0             1394                     CLR     SCL
0961 DAF7             1395                     DJNZ    R2,LOOP_SEND
0963 D002             1396             POP     02H
0965 22               1397             RET
                      1398     ;*************************************************************************************************
                      1399     ;This module reads the value passed by the RTC via SDA and places it in DAVAVA
                      1400     ;Parameters:None passed but output depends on the value passed through the SDA before calling this
                      1401     ;OUTPUT: value on DAVAVA
                      1402     ;DEPENDANCIES:None
                      1403     ;*************************************************************************************************
                      1404
                      1405     LOOP_READ:
0966 C002             1406             PUSH   02H
0968 7A08             1407         MOV    R2,#08H
                      1408             LOOP_READ1:
096A D2A0             1409                     SETB   SCL
096C A2A1             1410                     MOV    C,SDA
096E C2A0             1411                     CLR    SCL
0970 33               1412                     RLC    A
0971 DAF7             1413                     DJNZ   R2,LOOP_READ1
0973 F561             1414             MOV    DAVAVA,A
0975 D002             1415             POP    02H
0977 22               1416             RET
                      1417
                      1418     ;*************************************************************************************************
                      1419     ;This module will prepare the BCD data to display on the LCD
                      1420     ;Parameters:40h
                      1421     ;Return:msb in R3 and lsb in R2
                      1422     ;DEPENDANCIES:None
                      1423     ;*************************************************************************************************
                      1424     UNPACK:
0978 E540             1425             MOV A,40h
097A 540F             1426             ANL     A,#0FH
097C 2430             1427             ADD     A,#30h
097E FA               1428             MOV     R2,A
097F E540             1429             MOV A,40h
0981 C4               1430             SWAP    A
0982 540F             1431             ANL     A,#0FH
0984 2430             1432             ADD     A,#30H
0986 FB               1433             MOV     R3,A
0987 22               1434             RET
                      1435
                      1436
                      1437
                      1438     I2C_Stop:
0988 C2A1             1439             CLR       SDA
098A D2A0             1440             SETB      SCL
098C 00               1441             NOP
098D D2A1             1442             SETB      SDA
098F 22               1443             RET
                      1444
                      1445     ;*************************************************************************************************
                      1446     ;This module will convert 8-bit hexadecimal number to corresponding BCD equivalent MSB of 3-dig
                      1447     ;BCD will be placed in R2 and other two will be in 40H.
                      1448     ;Parameters:hex number in Acc
                      1449     ;Return:msb in r2 and 2-dig lsb IN 40H(and Acc)
                      1450     ;DEPENDANCIES:None
                      1451     ;*************************************************************************************************
                      1452     HEX_BCD:
0990 75F064           1453             MOV B,#100
0993 84               1454             DIV AB
0994 FA               1455             MOV R2, A
0995 E5F0             1456             MOV A, B
0997 75F00A           1457             MOV B, #10
099A 84               1458             DIV AB
099B C4               1459             SWAP A
099C 25F0             1460             ADD A, B
099E F540             1461             MOV 40H, A
09A0 22               1462             RET
                      1463     ;*************************************************************************************************
                      1464     ;This module is used to convert from BCD to HEX.
                      1465     ;Parameters:data to be converted in the Acc
                      1466     ;Return: converted data in Acc
                      1467     ;DEPENDANCIES:None
                      1468     ;*************************************************************************************************
                      1469     BCD_HEX:
09A1 C0E0             1470             PUSH ACC
09A3 540F             1471             ANL A, #0FH
09A5 FA               1472             MOV R2, A
09A6 D0E0             1473             POP ACC
09A8 54F0             1474             ANL A, #0F0H
09AA C4               1475             SWAP A
09AB 75F00A           1476             MOV B, #0AH
09AE A4               1477             MUL AB
09AF 2A               1478             ADD A, R2
09B0 22               1479             RET
                      1480
                      1481     CREATE_DATA:
09B1 756607           1482             MOV COUNT9, #07H
09B4 9002A6           1483             MOV DPTR,#TEMP
09B7 7858             1484             MOV R0,#58H
                      1485             UP2:
09B9 E4               1486             CLR A
09BA 93               1487             MOVC A, @A+DPTR
09BB F6               1488             MOV @R0, A
09BC 08               1489             INC R0
09BD A3               1490             INC DPTR
09BE D566F8           1491             DJNZ COUNT9, UP2
09C1 900001           1492             MOV DPTR, #0001H
09C4 7858             1493             MOV R0, #58H
09C6 756607           1494             MOV COUNT9, #07H
09C9 120796           1495             LCALL WRITE_DATA
09CC 22               1496             RET
                      1497
                      1498
                      1499     END
ASSEMBLY COMPLETE, NO ERRORS FOUND, NO WARNINGS


SYMBOL TABLE:
??MCU_8051_IDE . . . . . . . . . . .  N  NUMB  8051H  NOT USED
??VERSION. . . . . . . . . . . . . .  N  NUMB  0149H  NOT USED
AC . . . . . . . . . . . . . . . . .  B  ADDR  00D6H  NOT USED
ACC. . . . . . . . . . . . . . . . .  D  ADDR  00E0H
ACSR . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
ADCF . . . . . . . . . . . . . . . .  D  ADDR  00F6H  NOT USED
ADCLK. . . . . . . . . . . . . . . .  D  ADDR  00F2H  NOT USED
ADCON. . . . . . . . . . . . . . . .  D  ADDR  00F3H  NOT USED
ADDH . . . . . . . . . . . . . . . .  D  ADDR  00F5H  NOT USED
ADDL . . . . . . . . . . . . . . . .  D  ADDR  00F4H  NOT USED
ADD_LOWL . . . . . . . . . . . . . .  N  NUMB  0060H
ADD_NOTHING. . . . . . . . . . . . .  C  ADDR  050BH
ADD_NOTHING_1. . . . . . . . . . . .  C  ADDR  057FH
ADD_SOMETHING. . . . . . . . . . . .  C  ADDR  057DH
AUTH_FAIL. . . . . . . . . . . . . .  C  ADDR  03B1H
AUTH_FAIL_MSG. . . . . . . . . . . .  C  ADDR  01FDH
AUTH_MSG . . . . . . . . . . . . . .  C  ADDR  01DEH
AUXR . . . . . . . . . . . . . . . .  D  ADDR  008EH  NOT USED
AUXR1. . . . . . . . . . . . . . . .  D  ADDR  00A2H  NOT USED
B. . . . . . . . . . . . . . . . . .  D  ADDR  00F0H
BCD_HEX. . . . . . . . . . . . . . .  C  ADDR  09A1H
BDRCON . . . . . . . . . . . . . . .  D  ADDR  009BH  NOT USED
BDRCON_1 . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
BEGIN. . . . . . . . . . . . . . . .  C  ADDR  0100H
BELL_ACK . . . . . . . . . . . . . .  C  ADDR  028BH
BELL_KEY . . . . . . . . . . . . . .  N  NUMB  00B4H
BELL_MESSAGE . . . . . . . . . . . .  C  ADDR  021AH
BELL_NUMBER_MSG. . . . . . . . . . .  C  ADDR  0237H
BELL_OPTIONS . . . . . . . . . . . .  C  ADDR  0229H
BRL. . . . . . . . . . . . . . . . .  D  ADDR  009AH  NOT USED
CCAP0H . . . . . . . . . . . . . . .  D  ADDR  00FAH  NOT USED
CCAP0L . . . . . . . . . . . . . . .  D  ADDR  00EAH  NOT USED
CCAP1H . . . . . . . . . . . . . . .  D  ADDR  00FBH  NOT USED
CCAP1L . . . . . . . . . . . . . . .  D  ADDR  00EBH  NOT USED
CCAP2H . . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAP3H . . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAP4H . . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL2H. . . . . . . . . . . . . . .  D  ADDR  00FCH  NOT USED
CCAPL2L. . . . . . . . . . . . . . .  D  ADDR  00ECH  NOT USED
CCAPL3H. . . . . . . . . . . . . . .  D  ADDR  00FDH  NOT USED
CCAPL3L. . . . . . . . . . . . . . .  D  ADDR  00EDH  NOT USED
CCAPL4H. . . . . . . . . . . . . . .  D  ADDR  00FEH  NOT USED
CCAPL4L. . . . . . . . . . . . . . .  D  ADDR  00EEH  NOT USED
CCAPM0 . . . . . . . . . . . . . . .  D  ADDR  00DAH  NOT USED
CCAPM1 . . . . . . . . . . . . . . .  D  ADDR  00DBH  NOT USED
CCAPM2 . . . . . . . . . . . . . . .  D  ADDR  00DCH  NOT USED
CCAPM3 . . . . . . . . . . . . . . .  D  ADDR  00DDH  NOT USED
CCAPM4 . . . . . . . . . . . . . . .  D  ADDR  00DEH  NOT USED
CCF0 . . . . . . . . . . . . . . . .  B  ADDR  00D8H  NOT USED
CCF1 . . . . . . . . . . . . . . . .  B  ADDR  00D9H  NOT USED
CCF2 . . . . . . . . . . . . . . . .  B  ADDR  00DAH  NOT USED
CCF3 . . . . . . . . . . . . . . . .  B  ADDR  00DBH  NOT USED
CCF4 . . . . . . . . . . . . . . . .  B  ADDR  00DCH  NOT USED
CCON . . . . . . . . . . . . . . . .  D  ADDR  00D8H  NOT USED
CFINT. . . . . . . . . . . . . . . .  C  ADDR  0033H  NOT USED
CH . . . . . . . . . . . . . . . . .  D  ADDR  00F9H  NOT USED
CHECKING_BELL. . . . . . . . . . . .  C  ADDR  030DH
CHECKING_EMERGENCY . . . . . . . . .  C  ADDR  0310H
CHECK_ALARM. . . . . . . . . . . . .  C  ADDR  0373H  NOT USED
CHECK_KEY. . . . . . . . . . . . . .  C  ADDR  030AH
CHECK_NEXT_OPTION_1. . . . . . . . .  C  ADDR  05ECH
CHECK_NEXT_OPTION_2. . . . . . . . .  C  ADDR  05F1H
CKCON. . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKCON0 . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CKRL . . . . . . . . . . . . . . . .  D  ADDR  0097H  NOT USED
CKSEL. . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
CL . . . . . . . . . . . . . . . . .  D  ADDR  00E9H  NOT USED
CLKREG . . . . . . . . . . . . . . .  D  ADDR  008FH  NOT USED
CLOCK. . . . . . . . . . . . . . . .  C  ADDR  08B9H
CMD. . . . . . . . . . . . . . . . .  C  ADDR  0149H
CMOD . . . . . . . . . . . . . . . .  D  ADDR  00D9H  NOT USED
CONFIRM. . . . . . . . . . . . . . .  C  ADDR  027AH
CONFIRM_BELL . . . . . . . . . . . .  C  ADDR  05A5H
CONTINUE_1 . . . . . . . . . . . . .  C  ADDR  045EH
CONTINUE_2 . . . . . . . . . . . . .  C  ADDR  0465H
CONTINUE_3 . . . . . . . . . . . . .  C  ADDR  0483H
CONTINUE_4 . . . . . . . . . . . . .  C  ADDR  048AH
CONT_BYTE_R. . . . . . . . . . . . .  N  NUMB  00D1H
CONT_BYTE_W. . . . . . . . . . . . .  N  NUMB  00D0H
CORRECT_ENTRY. . . . . . . . . . . .  C  ADDR  05F8H
COUNT7 . . . . . . . . . . . . . . .  N  NUMB  006BH  NOT USED
COUNT8 . . . . . . . . . . . . . . .  N  NUMB  0068H  NOT USED
COUNT9 . . . . . . . . . . . . . . .  N  NUMB  0066H
CPRL2. . . . . . . . . . . . . . . .  B  ADDR  00C8H  NOT USED
CR . . . . . . . . . . . . . . . . .  B  ADDR  00DEH  NOT USED
CREATE_DATA. . . . . . . . . . . . .  C  ADDR  09B1H  NOT USED
CT2. . . . . . . . . . . . . . . . .  B  ADDR  00C9H  NOT USED
CY . . . . . . . . . . . . . . . . .  B  ADDR  00D7H  NOT USED
DAVAVA . . . . . . . . . . . . . . .  N  NUMB  0061H
DAY. . . . . . . . . . . . . . . . .  N  NUMB  0067H
DAYS . . . . . . . . . . . . . . . .  N  NUMB  0069H  NOT USED
DELAY_1SEC . . . . . . . . . . . . .  C  ADDR  02E4H
DELAY_500MSEC. . . . . . . . . . . .  C  ADDR  02F1H
DETERMINE_MODE . . . . . . . . . . .  C  ADDR  0167H
DISP . . . . . . . . . . . . . . . .  C  ADDR  02D7H
DISPCH2. . . . . . . . . . . . . . .  C  ADDR  02ADH
DISP_2DIG_NO . . . . . . . . . . . .  C  ADDR  077DH
DISP_DAY . . . . . . . . . . . . . .  C  ADDR  02BDH
DISP_MSG . . . . . . . . . . . . . .  C  ADDR  013AH
DISP_TIME. . . . . . . . . . . . . .  C  ADDR  0787H
DONE_ENTERING_SERIAL . . . . . . . .  C  ADDR  0496H
DP0H . . . . . . . . . . . . . . . .  D  ADDR  0083H  NOT USED
DP0L . . . . . . . . . . . . . . . .  D  ADDR  0082H  NOT USED
DP1H . . . . . . . . . . . . . . . .  D  ADDR  0085H  NOT USED
DP1L . . . . . . . . . . . . . . . .  D  ADDR  0084H  NOT USED
DPH. . . . . . . . . . . . . . . . .  D  ADDR  0083H
DPL. . . . . . . . . . . . . . . . .  D  ADDR  0082H
DURATION . . . . . . . . . . . . . .  N  NUMB  006AH
DURATION_MSG . . . . . . . . . . . .  C  ADDR  0272H
EA . . . . . . . . . . . . . . . . .  B  ADDR  00AFH  NOT USED
EC . . . . . . . . . . . . . . . . .  B  ADDR  00AEH  NOT USED
EDIT_BELL. . . . . . . . . . . . . .  C  ADDR  03F2H
EDIT_DURATION. . . . . . . . . . . .  C  ADDR  0261H
EECON. . . . . . . . . . . . . . . .  D  ADDR  0096H  NOT USED
EEPROM_DATA. . . . . . . . . . . . .  N  NUMB  0064H
EEPROM_DELAY . . . . . . . . . . . .  C  ADDR  08C6H
EEPROM_DELAY_1 . . . . . . . . . . .  C  ADDR  08C9H
EEPROM_START . . . . . . . . . . . .  C  ADDR  080EH
EEPROM_STOP. . . . . . . . . . . . .  C  ADDR  082DH
EMERGENCY. . . . . . . . . . . . . .  C  ADDR  03C1H
EMERGENCY_MSG. . . . . . . . . . . .  C  ADDR  020DH
EMMERGENCY . . . . . . . . . . . . .  C  ADDR  031CH
EMRG_KEY . . . . . . . . . . . . . .  N  NUMB  00B5H
END_CHECK_KEY. . . . . . . . . . . .  C  ADDR  0313H
ERROR. . . . . . . . . . . . . . . .  C  ADDR  0730H
ERROR_DAY. . . . . . . . . . . . . .  C  ADDR  06B9H
ERROR_EDIT_BELL. . . . . . . . . . .  C  ADDR  0585H
ERROR_ENTRY. . . . . . . . . . . . .  C  ADDR  0611H
ERROR_MSG. . . . . . . . . . . . . .  C  ADDR  01A6H
ES . . . . . . . . . . . . . . . . .  B  ADDR  00ACH  NOT USED
ET0. . . . . . . . . . . . . . . . .  B  ADDR  00A9H  NOT USED
ET1. . . . . . . . . . . . . . . . .  B  ADDR  00ABH  NOT USED
ET2. . . . . . . . . . . . . . . . .  B  ADDR  00ADH  NOT USED
EX0. . . . . . . . . . . . . . . . .  B  ADDR  00A8H  NOT USED
EX1. . . . . . . . . . . . . . . . .  B  ADDR  00AAH  NOT USED
EXEN2. . . . . . . . . . . . . . . .  B  ADDR  00CBH  NOT USED
EXF2 . . . . . . . . . . . . . . . .  B  ADDR  00CEH  NOT USED
EXTI0. . . . . . . . . . . . . . . .  C  ADDR  0003H  NOT USED
EXTI1. . . . . . . . . . . . . . . .  C  ADDR  0013H  NOT USED
F0 . . . . . . . . . . . . . . . . .  B  ADDR  00D5H  NOT USED
FE . . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
FIRST. . . . . . . . . . . . . . . .  C  ADDR  013FH
FLAG1. . . . . . . . . . . . . . . .  N  NUMB  0064H
GET. . . . . . . . . . . . . . . . .  C  ADDR  0873H
GET_DATA . . . . . . . . . . . . . .  C  ADDR  086EH
HAS_BELL_ENTRY . . . . . . . . . . .  C  ADDR  0414H
HERE31 . . . . . . . . . . . . . . .  C  ADDR  02E8H
HERE311. . . . . . . . . . . . . . .  C  ADDR  02FBH
HERE4. . . . . . . . . . . . . . . .  C  ADDR  02E6H
HERE41 . . . . . . . . . . . . . . .  C  ADDR  02F9H
HEX_BCD. . . . . . . . . . . . . . .  C  ADDR  0990H
HOURS. . . . . . . . . . . . . . . .  N  NUMB  0052H
HOURS1 . . . . . . . . . . . . . . .  N  NUMB  0059H  NOT USED
HOURS2 . . . . . . . . . . . . . . .  N  NUMB  0062H  NOT USED
I2C_STOP . . . . . . . . . . . . . .  C  ADDR  0988H
IE . . . . . . . . . . . . . . . . .  D  ADDR  00A8H  NOT USED
IE0. . . . . . . . . . . . . . . . .  B  ADDR  0089H  NOT USED
IE1. . . . . . . . . . . . . . . . .  B  ADDR  008BH  NOT USED
INPUT_DAY. . . . . . . . . . . . . .  C  ADDR  0666H
INPUT_DURATION . . . . . . . . . . .  C  ADDR  05CCH
INPUT_HOUR_MINUTE. . . . . . . . . .  C  ADDR  06CAH
INT0 . . . . . . . . . . . . . . . .  B  ADDR  00B2H  NOT USED
INT1 . . . . . . . . . . . . . . . .  B  ADDR  00B3H  NOT USED
INTI . . . . . . . . . . . . . . . .  C  ADDR  0121H
IP . . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPH. . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH0 . . . . . . . . . . . . . . . .  D  ADDR  00B7H  NOT USED
IPH1 . . . . . . . . . . . . . . . .  D  ADDR  00B3H  NOT USED
IPL0 . . . . . . . . . . . . . . . .  D  ADDR  00B8H  NOT USED
IPL1 . . . . . . . . . . . . . . . .  D  ADDR  00B2H  NOT USED
IT0. . . . . . . . . . . . . . . . .  B  ADDR  0088H  NOT USED
IT1. . . . . . . . . . . . . . . . .  B  ADDR  008AH  NOT USED
ITS_BELL . . . . . . . . . . . . . .  C  ADDR  06DAH
ITS_MODE_2 . . . . . . . . . . . . .  C  ADDR  052DH
KBE. . . . . . . . . . . . . . . . .  D  ADDR  009DH  NOT USED
KBF. . . . . . . . . . . . . . . . .  D  ADDR  009EH  NOT USED
KBLS . . . . . . . . . . . . . . . .  D  ADDR  009CH  NOT USED
KEY. . . . . . . . . . . . . . . . .  C  ADDR  0360H
KEYCODE. . . . . . . . . . . . . . .  C  ADDR  01D2H
KEYPD. . . . . . . . . . . . . . . .  C  ADDR  0320H
LOOP . . . . . . . . . . . . . . . .  C  ADDR  011BH
LOOP1. . . . . . . . . . . . . . . .  C  ADDR  06EEH
LOOP2. . . . . . . . . . . . . . . .  C  ADDR  0770H
LOOP3. . . . . . . . . . . . . . . .  C  ADDR  06A8H
LOOP4. . . . . . . . . . . . . . . .  C  ADDR  0395H
LOOP5. . . . . . . . . . . . . . . .  C  ADDR  0383H
LOOP6. . . . . . . . . . . . . . . .  C  ADDR  067BH
LOOP7. . . . . . . . . . . . . . . .  C  ADDR  0655H
LOOP8. . . . . . . . . . . . . . . .  C  ADDR  03E1H
LOOP9. . . . . . . . . . . . . . . .  C  ADDR  0450H
LOOP_BYTE. . . . . . . . . . . . . .  C  ADDR  0956H
LOOP_READ. . . . . . . . . . . . . .  C  ADDR  0966H
LOOP_READ1 . . . . . . . . . . . . .  C  ADDR  096AH
LOOP_SEND. . . . . . . . . . . . . .  C  ADDR  095AH
MEMORY_ADDRESS1. . . . . . . . . . .  N  NUMB  0062H  NOT USED
MEMORY_ADDRESS2. . . . . . . . . . .  N  NUMB  0063H  NOT USED
MEM_VAL. . . . . . . . . . . . . . .  N  NUMB  0000H  NOT USED
MESSAGE1 . . . . . . . . . . . . . .  C  ADDR  0183H
MESSAGE2 . . . . . . . . . . . . . .  C  ADDR  018EH
MESSAGE3 . . . . . . . . . . . . . .  C  ADDR  0199H
MESSAGE5 . . . . . . . . . . . . . .  C  ADDR  01EEH
MIN. . . . . . . . . . . . . . . . .  N  NUMB  0051H
MIN1 . . . . . . . . . . . . . . . .  N  NUMB  0058H  NOT USED
MINS2. . . . . . . . . . . . . . . .  N  NUMB  0063H  NOT USED
MODE . . . . . . . . . . . . . . . .  N  NUMB  007DH
N1 . . . . . . . . . . . . . . . . .  C  ADDR  06FDH
N10. . . . . . . . . . . . . . . . .  C  ADDR  0688H
N102 . . . . . . . . . . . . . . . .  C  ADDR  03A1H
N103 . . . . . . . . . . . . . . . .  C  ADDR  039EH
N11. . . . . . . . . . . . . . . . .  C  ADDR  068DH
N12. . . . . . . . . . . . . . . . .  C  ADDR  0692H
N13. . . . . . . . . . . . . . . . .  C  ADDR  06AFH
N14. . . . . . . . . . . . . . . . .  C  ADDR  03ECH
N15. . . . . . . . . . . . . . . . .  C  ADDR  04C7H
N16. . . . . . . . . . . . . . . . .  C  ADDR  0609H
N17. . . . . . . . . . . . . . . . .  C  ADDR  04DAH
N18. . . . . . . . . . . . . . . . .  C  ADDR  0521H
N2 . . . . . . . . . . . . . . . . .  C  ADDR  0703H
N3 . . . . . . . . . . . . . . . . .  C  ADDR  0719H
N4 . . . . . . . . . . . . . . . . .  C  ADDR  071EH
N5 . . . . . . . . . . . . . . . . .  C  ADDR  0746H
N6 . . . . . . . . . . . . . . . . .  C  ADDR  074CH
N7 . . . . . . . . . . . . . . . . .  C  ADDR  0761H
N8 . . . . . . . . . . . . . . . . .  C  ADDR  0767H
N9 . . . . . . . . . . . . . . . . .  C  ADDR  0777H
NEW_BELL . . . . . . . . . . . . . .  C  ADDR  04F4H
NEW_BELL_MSG . . . . . . . . . . . .  C  ADDR  0252H
NEXT . . . . . . . . . . . . . . . .  C  ADDR  06DDH
NEXT_ENTRY . . . . . . . . . . . . .  C  ADDR  0471H
NOTHING_TO_ADD . . . . . . . . . . .  C  ADDR  052FH
NO_BELL. . . . . . . . . . . . . . .  C  ADDR  0243H
OSCCON . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
OV . . . . . . . . . . . . . . . . .  B  ADDR  00D2H  NOT USED
P. . . . . . . . . . . . . . . . . .  B  ADDR  00D0H  NOT USED
P0 . . . . . . . . . . . . . . . . .  D  ADDR  0080H  NOT USED
P1 . . . . . . . . . . . . . . . . .  D  ADDR  0090H  NOT USED
P1M1 . . . . . . . . . . . . . . . .  D  ADDR  00D4H  NOT USED
P1M2 . . . . . . . . . . . . . . . .  D  ADDR  00E2H  NOT USED
P2 . . . . . . . . . . . . . . . . .  D  ADDR  00A0H
P3 . . . . . . . . . . . . . . . . .  D  ADDR  00B0H
P3M1 . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
P3M2 . . . . . . . . . . . . . . . .  D  ADDR  00E3H  NOT USED
P4 . . . . . . . . . . . . . . . . .  D  ADDR  00C0H  NOT USED
P4M1 . . . . . . . . . . . . . . . .  D  ADDR  00D6H  NOT USED
P4M2 . . . . . . . . . . . . . . . .  D  ADDR  00E4H  NOT USED
P5 . . . . . . . . . . . . . . . . .  D  ADDR  00E8H  NOT USED
PASSWORD . . . . . . . . . . . . . .  C  ADDR  01CDH  NOT USED
PC . . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PCON . . . . . . . . . . . . . . . .  D  ADDR  0087H  NOT USED
PPCL . . . . . . . . . . . . . . . .  B  ADDR  00BEH  NOT USED
PS . . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSL. . . . . . . . . . . . . . . . .  B  ADDR  00BCH  NOT USED
PSW. . . . . . . . . . . . . . . . .  D  ADDR  00D0H  NOT USED
PT0. . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT0L . . . . . . . . . . . . . . . .  B  ADDR  00B9H  NOT USED
PT1. . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT1L . . . . . . . . . . . . . . . .  B  ADDR  00BBH  NOT USED
PT2. . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PT2L . . . . . . . . . . . . . . . .  B  ADDR  00BDH  NOT USED
PX0. . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX0L . . . . . . . . . . . . . . . .  B  ADDR  00B8H  NOT USED
PX1. . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
PX1L . . . . . . . . . . . . . . . .  B  ADDR  00BAH  NOT USED
RB8. . . . . . . . . . . . . . . . .  B  ADDR  009AH  NOT USED
RCAP2H . . . . . . . . . . . . . . .  D  ADDR  00CBH  NOT USED
RCAP2L . . . . . . . . . . . . . . .  D  ADDR  00CAH  NOT USED
RCLK . . . . . . . . . . . . . . . .  B  ADDR  00CDH  NOT USED
RD . . . . . . . . . . . . . . . . .  B  ADDR  00B7H  NOT USED
READY. . . . . . . . . . . . . . . .  C  ADDR  0156H
READ_BYTE. . . . . . . . . . . . . .  C  ADDR  0916H
READ_DATA. . . . . . . . . . . . . .  C  ADDR  07E0H
READ_MINUTES . . . . . . . . . . . .  C  ADDR  073DH
READ_PASSWORD. . . . . . . . . . . .  C  ADDR  08D3H
READ_RTC . . . . . . . . . . . . . .  C  ADDR  0888H
REDO . . . . . . . . . . . . . . . .  C  ADDR  035AH
REN. . . . . . . . . . . . . . . . .  B  ADDR  009CH  NOT USED
REPEAT1. . . . . . . . . . . . . . .  C  ADDR  02EAH
REPEAT11 . . . . . . . . . . . . . .  C  ADDR  02FDH
RESET. . . . . . . . . . . . . . . .  C  ADDR  0000H  NOT USED
RI . . . . . . . . . . . . . . . . .  B  ADDR  0098H  NOT USED
ROW. . . . . . . . . . . . . . . . .  C  ADDR  0355H
RS0. . . . . . . . . . . . . . . . .  B  ADDR  00D3H  NOT USED
RS1. . . . . . . . . . . . . . . . .  B  ADDR  00D4H  NOT USED
RXD. . . . . . . . . . . . . . . . .  B  ADDR  00B0H  NOT USED
SADDR. . . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_0. . . . . . . . . . . . . . .  D  ADDR  00A9H  NOT USED
SADDR_1. . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SADEN. . . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_0. . . . . . . . . . . . . . .  D  ADDR  00B9H  NOT USED
SADEN_1. . . . . . . . . . . . . . .  D  ADDR  00BAH  NOT USED
SAVE_BELL. . . . . . . . . . . . . .  C  ADDR  0593H
SBUF . . . . . . . . . . . . . . . .  D  ADDR  0099H  NOT USED
SCL. . . . . . . . . . . . . . . . .  N  NUMB  00A0H
SCON . . . . . . . . . . . . . . . .  D  ADDR  0098H  NOT USED
SDA. . . . . . . . . . . . . . . . .  N  NUMB  00A1H
SEC. . . . . . . . . . . . . . . . .  N  NUMB  0050H
SECOND . . . . . . . . . . . . . . .  C  ADDR  0144H
SECONDS. . . . . . . . . . . . . . .  C  ADDR  0287H
SEND . . . . . . . . . . . . . . . .  C  ADDR  084EH
SEND_DATA. . . . . . . . . . . . . .  C  ADDR  084CH
SERIAL . . . . . . . . . . . . . . .  N  NUMB  007CH
SERIAL_NO. . . . . . . . . . . . . .  C  ADDR  0299H
SETT_BELL. . . . . . . . . . . . . .  C  ADDR  0318H
SETT_TIME. . . . . . . . . . . . . .  C  ADDR  0314H
SET_BELL . . . . . . . . . . . . . .  C  ADDR  03CDH
SET_BELL_VERIFIED. . . . . . . . . .  C  ADDR  03CDH
SET_FLAG . . . . . . . . . . . . . .  C  ADDR  03BCH
SET_TIME . . . . . . . . . . . . . .  C  ADDR  061EH
SINT . . . . . . . . . . . . . . . .  C  ADDR  0023H  NOT USED
SKIP1. . . . . . . . . . . . . . . .  C  ADDR  02D2H
SKIP111. . . . . . . . . . . . . . .  C  ADDR  02B8H
SM0. . . . . . . . . . . . . . . . .  B  ADDR  009FH  NOT USED
SM1. . . . . . . . . . . . . . . . .  B  ADDR  009EH  NOT USED
SM2. . . . . . . . . . . . . . . . .  B  ADDR  009DH  NOT USED
SP . . . . . . . . . . . . . . . . .  D  ADDR  0081H  NOT USED
SPCON. . . . . . . . . . . . . . . .  D  ADDR  00C3H  NOT USED
SPCR . . . . . . . . . . . . . . . .  D  ADDR  00D5H  NOT USED
SPDAT. . . . . . . . . . . . . . . .  D  ADDR  00C5H  NOT USED
SPDR . . . . . . . . . . . . . . . .  D  ADDR  0086H  NOT USED
SPSR . . . . . . . . . . . . . . . .  D  ADDR  00AAH  NOT USED
SPSTA. . . . . . . . . . . . . . . .  D  ADDR  00C4H  NOT USED
T0 . . . . . . . . . . . . . . . . .  B  ADDR  00B4H  NOT USED
T1 . . . . . . . . . . . . . . . . .  B  ADDR  00B5H  NOT USED
T2CON. . . . . . . . . . . . . . . .  D  ADDR  00C8H  NOT USED
T2MOD. . . . . . . . . . . . . . . .  D  ADDR  00C9H  NOT USED
TB8. . . . . . . . . . . . . . . . .  B  ADDR  009BH  NOT USED
TCLK . . . . . . . . . . . . . . . .  B  ADDR  00CCH  NOT USED
TCON . . . . . . . . . . . . . . . .  D  ADDR  0088H  NOT USED
TEMP . . . . . . . . . . . . . . . .  C  ADDR  02A6H
TEMP_DAY . . . . . . . . . . . . . .  N  NUMB  0053H
TF0. . . . . . . . . . . . . . . . .  B  ADDR  008DH  NOT USED
TF1. . . . . . . . . . . . . . . . .  B  ADDR  008FH  NOT USED
TF2. . . . . . . . . . . . . . . . .  B  ADDR  00CFH  NOT USED
TH0. . . . . . . . . . . . . . . . .  D  ADDR  008CH  NOT USED
TH1. . . . . . . . . . . . . . . . .  D  ADDR  008DH  NOT USED
TH2. . . . . . . . . . . . . . . . .  D  ADDR  00CDH  NOT USED
TI . . . . . . . . . . . . . . . . .  B  ADDR  0099H  NOT USED
TIMER0 . . . . . . . . . . . . . . .  C  ADDR  000BH  NOT USED
TIMER1 . . . . . . . . . . . . . . .  C  ADDR  001BH  NOT USED
TIMER2 . . . . . . . . . . . . . . .  C  ADDR  002BH  NOT USED
TIME_KEY . . . . . . . . . . . . . .  N  NUMB  00B3H
TL0. . . . . . . . . . . . . . . . .  D  ADDR  008AH  NOT USED
TL1. . . . . . . . . . . . . . . . .  D  ADDR  008BH  NOT USED
TL2. . . . . . . . . . . . . . . . .  D  ADDR  00CCH  NOT USED
TMOD . . . . . . . . . . . . . . . .  D  ADDR  0089H  NOT USED
TR0. . . . . . . . . . . . . . . . .  B  ADDR  008CH  NOT USED
TR1. . . . . . . . . . . . . . . . .  B  ADDR  008EH  NOT USED
TR2. . . . . . . . . . . . . . . . .  B  ADDR  00CAH  NOT USED
TXD. . . . . . . . . . . . . . . . .  B  ADDR  00B1H  NOT USED
UNPACK . . . . . . . . . . . . . . .  C  ADDR  0978H
UP11 . . . . . . . . . . . . . . . .  C  ADDR  02B2H
UP12 . . . . . . . . . . . . . . . .  C  ADDR  02C3H  NOT USED
UP13 . . . . . . . . . . . . . . . .  C  ADDR  02CAH
UP2. . . . . . . . . . . . . . . . .  C  ADDR  09B9H
VER_PASSWORD . . . . . . . . . . . .  C  ADDR  0374H
WAIT . . . . . . . . . . . . . . . .  C  ADDR  015FH
WAIT_FOR_ENTER . . . . . . . . . . .  C  ADDR  04C0H
WAIT_FOR_ENTER_KEY . . . . . . . . .  C  ADDR  0600H
WAIT_FOR_ENTER_KEY_1 . . . . . . . .  C  ADDR  04D3H
WAIT_FOR_ENTER_KEY_2 . . . . . . . .  C  ADDR  051AH
WDTCON . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTPRG . . . . . . . . . . . . . . .  D  ADDR  00A7H  NOT USED
WDTRST . . . . . . . . . . . . . . .  D  ADDR  00A6H  NOT USED
WEEKDAY. . . . . . . . . . . . . . .  C  ADDR  01B5H
WELCOME. . . . . . . . . . . . . . .  C  ADDR  0176H
WR . . . . . . . . . . . . . . . . .  B  ADDR  00B6H  NOT USED
WRITE_BYTE . . . . . . . . . . . . .  C  ADDR  08DFH
WRITE_DATA . . . . . . . . . . . . .  C  ADDR  0796H